<?xml version="1.0" encoding="utf-8"?>
<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res"/><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\rs\debug"/><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\resValues\debug"/><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\google-services\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res"><file name="cert" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cert.png" qualifiers="" type="drawable"/><file name="cornerbg" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cornerbg.xml" qualifiers="" type="drawable"/><file name="cornergree" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cornergree.xml" qualifiers="" type="drawable"/><file name="cornerred" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cornerred.xml" qualifiers="" type="drawable"/><file name="corners" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\corners.xml" qualifiers="" type="drawable"/><file name="cornerwhite" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cornerwhite.xml" qualifiers="" type="drawable"/><file name="gradient" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\gradient.xml" qualifiers="" type="drawable"/><file name="ic_baseline_account_circle_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_account_circle_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_add_a_photo_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_add_a_photo_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_copy_all_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_copy_all_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_email_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_email_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_home_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_home_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_image_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_image_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_lock_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_lock_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_menu_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_menu_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_perm_identity_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_perm_identity_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_text_fields_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_text_fields_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_visibility_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_visibility_24.xml" qualifiers="" type="drawable"/><file name="ic_baseline_visibility_off_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_baseline_visibility_off_24.xml" qualifiers="" type="drawable"/><file name="ic_launcher_background" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\ic_launcher_background.xml" qualifiers="" type="drawable"/><file name="input" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\input.xml" qualifiers="" type="drawable"/><file name="logo" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\logo.png" qualifiers="" type="drawable"/><file name="testcert" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\testcert.png" qualifiers="" type="drawable"/><file name="wave" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\wave.xml" qualifiers="" type="drawable"/><file name="wave__1_" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\wave__1_.xml" qualifiers="" type="drawable"/><file name="_01" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_01.png" qualifiers="" type="drawable"/><file name="_02" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_02.png" qualifiers="" type="drawable"/><file name="_021684" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_021684.png" qualifiers="" type="drawable"/><file name="_03" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_03.png" qualifiers="" type="drawable"/><file name="_04" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_04.png" qualifiers="" type="drawable"/><file name="_05" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_05.png" qualifiers="" type="drawable"/><file name="_06" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_06.png" qualifiers="" type="drawable"/><file name="_07" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_07.png" qualifiers="" type="drawable"/><file name="_076337" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_076337.png" qualifiers="" type="drawable"/><file name="_08" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_08.png" qualifiers="" type="drawable"/><file name="_09" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_09.png" qualifiers="" type="drawable"/><file name="_099192" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_099192.png" qualifiers="" type="drawable"/><file name="_10" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_10.png" qualifiers="" type="drawable"/><file name="_102595" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_102595.png" qualifiers="" type="drawable"/><file name="_102610" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_102610.png" qualifiers="" type="drawable"/><file name="_11" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_11.png" qualifiers="" type="drawable"/><file name="_12" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_12.png" qualifiers="" type="drawable"/><file name="_13" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_13.png" qualifiers="" type="drawable"/><file name="_14" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_14.png" qualifiers="" type="drawable"/><file name="_15" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_15.png" qualifiers="" type="drawable"/><file name="_16" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_16.png" qualifiers="" type="drawable"/><file name="_177440" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_177440.png" qualifiers="" type="drawable"/><file name="_210456" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_210456.png" qualifiers="" type="drawable"/><file name="_26777" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_26777.png" qualifiers="" type="drawable"/><file name="_281329" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_281329.png" qualifiers="" type="drawable"/><file name="_292849" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_292849.png" qualifiers="" type="drawable"/><file name="_550285" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_550285.png" qualifiers="" type="drawable"/><file name="_658034" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_658034.png" qualifiers="" type="drawable"/><file name="_940162" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_940162.png" qualifiers="" type="drawable"/><file name="_946488" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_946488.png" qualifiers="" type="drawable"/><file name="_965685" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_965685.png" qualifiers="" type="drawable"/><file name="ic_launcher_foreground" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable-v24\ic_launcher_foreground.xml" qualifiers="v24" type="drawable"/><file name="activity_account" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_account.xml" qualifiers="" type="layout"/><file name="activity_accountemail" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_accountemail.xml" qualifiers="" type="layout"/><file name="activity_accountname" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_accountname.xml" qualifiers="" type="layout"/><file name="activity_accountpass" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_accountpass.xml" qualifiers="" type="layout"/><file name="activity_cert" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_cert.xml" qualifiers="" type="layout"/><file name="activity_compiler" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_compiler.xml" qualifiers="" type="layout"/><file name="activity_forget_pass" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_forget_pass.xml" qualifiers="" type="layout"/><file name="activity_javaarray" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javaarray.xml" qualifiers="" type="layout"/><file name="activity_javabasic" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javabasic.xml" qualifiers="" type="layout"/><file name="activity_javadata" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javadata.xml" qualifiers="" type="layout"/><file name="activity_javaexception" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javaexception.xml" qualifiers="" type="layout"/><file name="activity_javaflow" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javaflow.xml" qualifiers="" type="layout"/><file name="activity_javakeywords" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javakeywords.xml" qualifiers="" type="layout"/><file name="activity_javaloops" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javaloops.xml" qualifiers="" type="layout"/><file name="activity_javaop" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javaop.xml" qualifiers="" type="layout"/><file name="activity_javapack" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javapack.xml" qualifiers="" type="layout"/><file name="activity_javastring" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_javastring.xml" qualifiers="" type="layout"/><file name="activity_login" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_login.xml" qualifiers="" type="layout"/><file name="activity_main" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_main.xml" qualifiers="" type="layout"/><file name="activity_ocr" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_ocr.xml" qualifiers="" type="layout"/><file name="activity_register" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_register.xml" qualifiers="" type="layout"/><file name="activity_result01" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_result01.xml" qualifiers="" type="layout"/><file name="activity_result02" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_result02.xml" qualifiers="" type="layout"/><file name="activity_result03" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_result03.xml" qualifiers="" type="layout"/><file name="activity_test" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test.xml" qualifiers="" type="layout"/><file name="activity_test01" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test01.xml" qualifiers="" type="layout"/><file name="activity_test011" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test011.xml" qualifiers="" type="layout"/><file name="activity_test0110" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test0110.xml" qualifiers="" type="layout"/><file name="activity_test012" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test012.xml" qualifiers="" type="layout"/><file name="activity_test013" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test013.xml" qualifiers="" type="layout"/><file name="activity_test014" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test014.xml" qualifiers="" type="layout"/><file name="activity_test015" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test015.xml" qualifiers="" type="layout"/><file name="activity_test016" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test016.xml" qualifiers="" type="layout"/><file name="activity_test017" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test017.xml" qualifiers="" type="layout"/><file name="activity_test018" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test018.xml" qualifiers="" type="layout"/><file name="activity_test019" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test019.xml" qualifiers="" type="layout"/><file name="activity_test02" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test02.xml" qualifiers="" type="layout"/><file name="activity_test021" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test021.xml" qualifiers="" type="layout"/><file name="activity_test0210" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test0210.xml" qualifiers="" type="layout"/><file name="activity_test022" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test022.xml" qualifiers="" type="layout"/><file name="activity_test023" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test023.xml" qualifiers="" type="layout"/><file name="activity_test024" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test024.xml" qualifiers="" type="layout"/><file name="activity_test025" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test025.xml" qualifiers="" type="layout"/><file name="activity_test026" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test026.xml" qualifiers="" type="layout"/><file name="activity_test027" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test027.xml" qualifiers="" type="layout"/><file name="activity_test028" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test028.xml" qualifiers="" type="layout"/><file name="activity_test029" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test029.xml" qualifiers="" type="layout"/><file name="activity_test03" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test03.xml" qualifiers="" type="layout"/><file name="activity_test031" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test031.xml" qualifiers="" type="layout"/><file name="activity_test0310" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test0310.xml" qualifiers="" type="layout"/><file name="activity_test032" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test032.xml" qualifiers="" type="layout"/><file name="activity_test033" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test033.xml" qualifiers="" type="layout"/><file name="activity_test034" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test034.xml" qualifiers="" type="layout"/><file name="activity_test035" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test035.xml" qualifiers="" type="layout"/><file name="activity_test036" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test036.xml" qualifiers="" type="layout"/><file name="activity_test037" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test037.xml" qualifiers="" type="layout"/><file name="activity_test038" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test038.xml" qualifiers="" type="layout"/><file name="activity_test039" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_test039.xml" qualifiers="" type="layout"/><file name="activity_tutorial" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\activity_tutorial.xml" qualifiers="" type="layout"/><file name="header_navigator" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\layout\header_navigator.xml" qualifiers="" type="layout"/><file name="content" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\menu\content.xml" qualifiers="" type="menu"/><file name="drawer_menu" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\menu\drawer_menu.xml" qualifiers="" type="menu"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml" qualifiers="anydpi-v26" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml" qualifiers="anydpi-v26" type="mipmap"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-hdpi\ic_launcher.webp" qualifiers="hdpi-v4" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-hdpi\ic_launcher_round.webp" qualifiers="hdpi-v4" type="mipmap"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-mdpi\ic_launcher.webp" qualifiers="mdpi-v4" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-mdpi\ic_launcher_round.webp" qualifiers="mdpi-v4" type="mipmap"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xhdpi\ic_launcher.webp" qualifiers="xhdpi-v4" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xhdpi\ic_launcher_round.webp" qualifiers="xhdpi-v4" type="mipmap"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xxhdpi\ic_launcher.webp" qualifiers="xxhdpi-v4" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xxhdpi\ic_launcher_round.webp" qualifiers="xxhdpi-v4" type="mipmap"/><file name="ic_launcher" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xxxhdpi\ic_launcher.webp" qualifiers="xxxhdpi-v4" type="mipmap"/><file name="ic_launcher_round" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\mipmap-xxxhdpi\ic_launcher_round.webp" qualifiers="xxxhdpi-v4" type="mipmap"/><file name="trans_anim" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\transition\trans_anim.xml" qualifiers="" type="transition"/><file path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\values\colors.xml" qualifiers=""><color name="purple_200">#FFBB86FC</color><color name="purple_500">#FF6200EE</color><color name="purple_700">#FF3700B3</color><color name="teal_200">#FF03DAC5</color><color name="teal_700">#FF018786</color><color name="black">#FF000000</color><color name="white">#FFFFFFFF</color><color name="main">#A45EE9</color><color name="button">#d6b1fa</color><color name="mainop">#581f8f</color><color name="darkgray">#A9A9A9</color><color name="error">#CD0000</color><color name="green">#32cd32</color><color name="red">#dc143c</color></file><file path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\values\strings.xml" qualifiers=""><string name="app_name">J-IDetect</string><string name="navigator_close">close nav</string><string name="Test0101">Which one is a valid declaration of a boolean?</string><string name="Test0101.1">boolean b1 = 0;</string><string name="Test0101.2">boolean b2 = \'false\';</string><string name="Test0101.3">boolean b3 = false;</string><string name="Test0101.4">boolean b4 = Boolean.false();</string><string name="Test0101.5">boolean b5 = no;</string><string name="Test0102">Java is short for "JavaScript"</string><string name="Test0102.1">TRUE</string><string name="Test0102.2">FALSE</string><string name="Test0103">How do you insert COMMENTS in Java code?</string><string name="Test0103.1">/* This is a comment</string><string name="Test0103.2"># This is a comment</string><string name="Test0103.3">// This is a comment</string><string name="Test0104">Which operator is used to add together two values?</string><string name="Test0104.1">The * sign</string><string name="Test0104.2">The &amp; sign</string><string name="Test0104.3">The + sign</string><string name="Test0105">Which method can be used to find the length of a string?</string><string name="Test0105.1">length()</string><string name="Test0105.2">getLength()</string><string name="Test0105.3">getSize()</string><string name="Test0105.4">len()</string><string name="Test0107">Print \"Hello, World\"</string><string name="Test0201">Predict the output of the following program:\n\n\nclass Test {\n\t\tpublic static void main(String args[]) {\n\t\t\t\tint arr[2];\n\t\t\t\tSystem.out.println(arr[0]);\n\t\t\t\tSystem.out.println(arr[1]);\n\t\t}\n}</string><string name="Test0202">Predict the output of the following program:\n\n\nclass Test {\n\t\tpublic static void main(String args[]) {\n\t\t\t\tint arr[] = new int[2];\n\t\t\t\tSystem.out.println(arr[0]);\n\t\t\t\tSystem.out.println(arr[1]);\n\t\t}\n}</string><string name="Test0201.1">0 and 0</string><string name="Test0201.2">garbage value and garbage value</string><string name="Test0201.3">Compiler Error</string><string name="Test0201.4">Exception</string><string name="Test0203">Predict the output of the following program:\n\n\nabstract class demo\n{\n\t\tpublic int a;\n\t\tdemo()\n\t\t{\n\t\t\t\ta = 10;\n\t\t}\n\n\t\tabstract public void set();\n\n\t\tabstract final public void get();\n\n}\n\nclass Test extends demo\n{\n\t\tpublic void set(int a)\n\t\t{\n\t\t\t\tthis.a = a;\n\t\t}\n\n\t\tfinal public void get()\n\t\t{\n\t\t\t\tSystem.out.println("a = " + a);\n\t\t}\n\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\t\tTest obj = new Test();\n\t\t\t\tobj.set(20);\n\t\t\t\tobj.get();\n\t\t}\n}</string><string name="Test0204">Output of following Java program?\n\nclass Test\n{\n\t\tpublic static void main (String[] args) \n\t\t{\n\t\t\t\tint \a\r\r1[] = {1, 2, 3};\n\t\t\t\tint arr2[] = {1, 2, 3};\n\t\t\t\tif (\a\r\r1 == arr2) \n\t\t\t\t\t\tSystem.out.println("Same");\n\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println("Not same");\n\t\t}\n}</string><string name="Test0204.1">Same</string><string name="Test0204.2">Not Same</string><string name="Test0205">Which of the following is true about interfaces in java.\n\n1) An interface can contain following type of members.\n....public, static, final fields (i.e., constants) \n....default and static methods with bodies\n\n2) An instance of interface can be created.\n\n3) A class can implement multiple interfaces.\n\n4) Many classes can implement the same interface.</string><string name="Test0205.1">1, 3 and 4</string><string name="Test0205.2">1, 2 and 4</string><string name="Test0205.3">2, 3 and 4</string><string name="Test0205.4">1, 2, 3, and 4</string><string name="Test0206">import java.util.Arrays;\nclass Test\n{\n\t\tpublic static void main (String[] args) \n\t\t{\n\t\t\t\tint arr1[] = {1, 2, 3};\n\t\t\t\tint arr2[] = {1, 2, 3};\n\t\t\t\tif (Arrays.equals(1, 2, 3))\n\t\t\t\t\t\tSystem.out.println("Same");\n\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println("Not same");\n\t\t}\n}</string><string name="Test0207">public class Test\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\t\tStringBuffer a = new StringBuffer("Hello");\n\t\t\t\tStringBuffer b = new StringBuffer("World");\n\t\t\t\ta.append(2,3);\n\t\t\t\ta.append(b);\n\t\t\t\tSystem.out.println(a);\n\t\t}\n}</string><string name="Test0208">public class Test\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\t\tString str = "Hello";\n\t\t\t\tstr.toUpperCase();\n\t\t\t\tstr += "World";\n\t\t\t\tString string = str.charAt(4,10);\n\t\t\t\tstring = string + str.charAt(2);\n\t\t\t\tSystem.out.println(string);\n\t\t}\n}</string><string name="Test0209">public class Test\n{\n\t\tpublic static void main (String[] args)\n\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t\tint a = 0;\n\t\t\t\t\t\tSystem.out.println ("a = " + a);\n\t\t\t\t\t\tint b = 20 / 4;\n\t\t\t\t\t\tSystem.out.println ("b = " + b);\n\t\t\t\t\t\t}\n\n\t\t\t\tcatch(Exception e)\n\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println ("Divide by zero error");\n\t\t\t\t}\n\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println ("inside the finally block");\n\t\t\t\t}\n\t\t}\n}</string><string name="Test0210">public class Test\n{\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\t\tDouble object = new Double("2.4");\n\t\t\t\tint a = object.Value();\n\t\t\t\tbyte b = object.Value();\n\t\t\t\tfloat d = object.Value();\n\t\t\t\tdouble c = object.Value();\n\n\t\t\t\tSystem.out.println(a + b + c + d );\n\n\t\t}\n}</string><string name="Test0301">public class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t\tPattern pattern = Pattern.compile("J-IDetect", Pattern.CASE_INSENSITIVE);\n\t\t\t\tMatcher matcher = pattern.matcher("Visit J-IDetect!");\n\t\t\t\tboolean matchFound = matcher.find();\n\t\t\t\tif(matcher) {\n\t\t\t\t\t\tSystem.out.println("Match found");\n\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println("Match not found");\n\t\t\t\t}\n\t\t}\n}</string><string name="Test0302">public class Test { \n\t\tpublic static void main(String[] args) { \n\t\t\t\tInteger myInt = 1000; \n\t\t\t\tString myString = myInt;\n\t\t\t\tSystem.out.println(myString);\n\t\t}\n}</string><string name="Test0303">public class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t\tArrayList&lt;Integer> numbers = new ArrayList&lt;Integer>();\n\t\t\t\tnumbers.add(12);\n\t\t\t\tnumbers.add(8);\n\t\t\t\tnumbers.add(2);\n\t\t\t\tnumbers.add(23);\n\t\t\t\tIterator&lt;Integer> it = numbers.iterator();\n\n\n\t\t\t\tSystem.out.println(numbers);\n\t\t}\n}</string><string name="Test0304">public class Test { \n\t\tpublic static void main(String[] args) { \n\t\t\t\tArrayList&lt;Integer> myNumbers = new ArrayList&lt;Integer>();\n\n\n\t\t\t\tfor (int i : myNumbers) {\n\t\t\t\t\t\tSystem.out.println(i);\n\t\t\t\t}\n\t\t} \n}</string><string name="Test0305">import java.io.File;\nimport java.io.IOException;\n\n\t\tpublic class Test {\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tFile myObj = new File("filename.txt");\n\t\t\t\t\t\t\t\tif (myObj.create()) {\n\t\t\t\t\t\t\t\t\t\tSystem.out.println("File created: " + myObj.getName());\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tSystem.out.println("File already exists.");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tSystem.out.println("An error occurred.");\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t}\n}</string><string name="Test0306">import java.util.HashMap;\n\npublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t\tHashMap capitalCities = new HashMap();\n\t\t\t\tcapitalCities.put("England", "London");\n\t\t\t\tcapitalCities.put("Germany", "Berlin");\n\t\t\t\tcapitalCities.put("Norway", "Oslo");\n\t\t\t\tcapitalCities.put("USA", "Washington DC");\n\t\t\t\tSystem.out.println(capitalCities); \n\t\t}\n}</string><string name="Test0307">class OuterClass {\n\t\tint x = 10;\n}\nclass Test {\n\t\tint y = 5;  \n}\n\npublic class Main {\n\t\tpublic static void main(String[] args) {\n\t\t\t\tSystem.out.println(myInner.y + myOuter.x);\n\t\t}\n}</string><string name="Test0308">import java.time.LocalDate;\n\npublic class Test {  \n\t\tpublic static void main(String[] args) {  \n\t\t\t\tLocalDate myObj = LocalDate;\n\t\t\t\tSystem.out.println(myObj);\n\t\t}  \n}  </string><string name="Test0309">enum Level {\n\t\tLOW,\n\t\tMEDIUM,\n\t\tHIGH\n}\n\npublic class Test { \n\t\tpublic static void main(String[] args) {\n\t\t\t\tLevel myVar = Level; \n\t\t\t\tswitch(myVar) {\n\t\t\t\t\t\tcase LOW:\n\t\t\t\t\t\t\t\tSystem.out.println("Low level");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase MEDIUM:\n\t\t\t\t\t\t\t\tSystem.out.println("Medium level");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase HIGH:\n\t\t\t\t\t\t\t\tSystem.out.println("High level");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n}</string><string name="Test0310">class OuterClass {\n\t\tint x = 10;\n\t\tstatic class InnerClass {\n\t\t\t\tint y = 5;\n\t\t}\n}\n\npublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t\tInnerClass myInner = new InnerClass();\n\t\t\t\tSystem.out.println(myInner.y);\n\t\t}\n}</string><string name="TableofContent">
        <font size="20"><big><b>Tutorials Table of Contents</b></big></font>\n\n
        <font size="20"><b>Basic of Java</b>\n
        <ul>
            <li>Introduction of the Java</li>\n
            <li>Java Hello World Program</li>\n\n
        </ul>
        <b>Variables and DataTypes in Java</b>\n
        <ul>
            <li>Variables in Java</li>\n
            <li>Data types in Java</li>\n\n
        </ul>
        <b>Operators in Java</b>\n
        <ul>
            <li>Operators in Java</li>\n\n
        </ul>
        <b>Packages in Java</b>\n
        <ul>
            <li>Packages In Java</li>\n\n
        </ul>
        <b>Flow Control in Java</b>\n
        <ul>
            <li>Decision Making in Java (if, if-else, switch, break, continue, jump)</li>\n\n
        </ul>
        <b>Loops in Java</b>\n
        <ul>
            <li>Loops in Java</li>\n
            <li>Java For loop with Examples</li>\n
            <li>Java while loop with Examples</li>\n
            <li>Java do-while loop with Examples</li>\n
            <li>For-each loop in Java</li>\n\n
        </ul>
        <b>Arrays in Java</b>\n
        <ul>
            <li>Arrays in Java</li>\n
            <li>Multidimensional Arrays in Java</li>\n\n
        </ul>
        <b>Strings in Java</b>\n
        <ul>
            <li>Strings in Java</li>\n\n
        </ul>
        <b>Exception Handling in Java</b>\n
        <ul>
            <li>Exceptions in Java</li>\n
        </ul>
        <b>Keywords in Java</b>\n
        <ul>
            <li>List of all Java Keywords</li>
        </ul>
        </font>
    </string><string name="BasicofJavaTitle">
        <font size="30"><b>BASIC OF JAVA</b></font>
    </string><string name="BasicofJava">
        <font size="20"><b><i>Introduction of the Java</i></b></font>\n
            <font size="12">
                <p><b>\t\tJAVA</b>was developed by James Gosling at <b>Sun Microsystems Inc</b> in the year <b>1995</b>, later acquired by Oracle Corporation. It is a simple programming language. Java makes writing, compiling, and debugging programming easy. It helps to create reusable code and modular programs. Java is a class-based, object-oriented programming language and is designed to have as few implementation dependencies as possible. A general-purpose programming language made for developers to write once run anywhere that is compiled Java code can run on all platforms that support Java. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to c and c++.</p>\n\n
                <p><b>\t\tHistory:</b>Java’s history is very interesting. It is a programming language created in 1991. <u>James Gosling</u>, <u>Mike Sheridan</u>, and <u>Patrick Naughton</u>, a team of Sun engineers known as the <b>Green team</b> initiated the Java language in 1991. <b>Sun Microsystems</b> released its first public implementation in 1996 as <b>Java 1.0</b>. It provides no-cost -run-times on popular platforms. Java1.0 compiler was re-written in Java by Arthur Van Hoff to strictly comply with its specifications. With the arrival of Java 2, new versions had multiple configurations built for different types of platforms.</p>\n\n
                <p>\t\tIn 1997, Sun Microsystems approached the ISO standards body and later formalized Java, but it soon withdrew from the process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.</p>\n\n
                <p>\t\tOn November 13, 2006, Sun released much of its Java virtual machine as free, open-source software. On May 8, 2007, Sun finished the process, making all of its JVM’s core code available under open-source distribution terms.</p>\n\n
                <p>\t\tThe principles for creating java were simple, robust, secured, high performance, portable, multi-threaded, interpreted, dynamic, etc. In 1995 Java was developed by <b>James Gosling</b>, who is known as the Father of Java. Currently, Java is used in mobile devices, internet programming, games, e-business, etc.</p>\n\n\n\n
            </font>
        <font size="16"><b><i>Java programming language is named JAVA. Why?</i></b></font>\n
            <font size="12">
                <p>\t\tAfter the name OAK, the team decided to give a new name to it and the suggested words were Silk, Jolt, revolutionary, DNA, dynamic, etc. These all names were easy to spell and fun to say, but they all wanted the name to reflect the essence of technology. In accordance with James Gosling, <b>Java</b> the among the top names along with <b>Silk</b>, and since java was a unique name so most of them preferred it.</p>\n\n
                <p>\t\tJava is the name of an island in Indonesia where the first coffee(named java coffee) was produced. And this name was chosen by James Gosling while having coffee near his office. Note that Java is just a name, not an acronym.</p>\n\n\n\n
            </font>
        <font size="16"><b><i>Java Terminology</i></b></font>\n
            <font size="12">
                <p>Before learning Java, one must be familiar with these common terms of Java.</p>\n\n
                <p>1.<b><u>Java Virtual Machine(JVM)</u></b>:  This is generally referred to as JVM. There are three execution phases of a program. They are written, compile and run the program.</p>\n
                    <ul>
                        <li>Writing a program is done by a java programmer like you and me.</li>\n
                        <li>The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.</li>\n
                        <li>In the Running phase of a program, JVM executes the bytecode generated by the compiler.</li>\n
                    </ul>
                <p>Now, we understood that the function of Java Virtual Machine is to execute the bytecode produced by the compiler. Every Operating System has a different JVM but the output they produce after the execution of bytecode is the same across all the operating systems. This is why Java is known as a platform-independent language.</p>\n\n
                <p>2.<b><u>Bytecode in the Development process</u></b>:  As discussed, the Javac compiler of JDK compiles the java source code into bytecode so that it can be executed by JVM. It is saved as .class file by the compiler. To view the bytecode, a disassembler like javap can be used.</p>\n\n
                <p>3.<b><u>Java Development Kit(JDK)</u></b>: While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler, Java Runtime Environment (JRE), java debuggers, java docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.</p>\n\n
                <p>4.<b><u>Java Runtime Environment (JRE)</u></b>: JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet supports, and plugins. For running the java program, a computer needs JRE.</p>\n\n
                <p>5.<b><u>Garbage Collector</u></b>: In Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced.</p>\n\n
                <p>6.<b><u>ClassPath</u></b>: The classpath is the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath.</p>\n\n
            </font>
        <font size="16"><b><i>Primary/Main Features of Java</i></b></font>\n
            <font size="12">
                <p>1.<b><u>Platform Independent</u></b>:  Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of bytecode. That is why we call java a platform-independent language.</p>\n\n
                <p>2.<b><u>Object-Oriented Programming Language</u></b>:  Organizing the program in the terms of collection of objects is a way of object-oriented programming, each of which represents an instance of the class.</p>\n\n
                <p>The four main concepts of Object-Oriented programming are:</p>\n
                    <ul>
                        <li>Abstraction</li>\n
                        <li>Encapsulation</li>\n
                        <li>Inheritance</li>\n
                        <li>Polymorphism</li>\n\n
                    </ul>
                <p>3.<b><u>Simple</u></b>:  Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, and Explicit memory allocation.</p>\n\n
                <p>4.<b><u> Robust</u></b>:  Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation.</p>\n\n
                <p>5.<b><u>Secure</u></b> :  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure.</p>\n\n
                <p>6.<b><u>Distributed</u></b>:  We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.</p>\n\n
                <p>7.<b><u>Multithreading</u></b>:  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.</p>\n\n
                <p>8.<b><u>Portable</u></b> :  As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.</p>\n\n
                <p>9.<b><u>High Performance</u></b> : Java architecture is defined in such a way that it reduces overhead during the runtime and at some time java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.</p>\n\n
                <p>10.<b><u>Dynamic Flexibility</u></b> : Java being completely object-oriented gives us the flexibility to add classes,  new methods to existing classes and even create new classes through sub-classes. Java even supports functions written in other languages such as C, C++ which are referred to as native methods.</p>\n\n
                <p>11.<b><u>Sandbox Execution</u></b>: Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with help of a bytecode verifier. Bytecode verifier also provides additional security as its role is to check the code for any violation of access.</p>\n\n
                <p>12.<b><u>Write Once Run Anywhere</u></b>: As discussed above java application generates a ‘.class’ file which corresponds to our applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide.</p>\n\n
                <p>13.<b><u>Power of compilation and interpretation</u></b>: Most languages are designed with purpose either they are compiled language or they are interpreted language. But java integrates arising enormous power as Java compiler compiles the source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.</p>\n\n
            </font>
        <font size="16">
            <b><i>Example</i></b>\n
                <font size="10">
                    <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Importing classes from packages</font></p>\n
                    <p><font color="#3399ff">\t\timport</font> java.io.*</p>\n\n
                    <p><font color="#2eb82e">\t\t// Main class</font></p>\n
                    <p><font color="#3399ff">\t\tpublic class</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main driver method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args)</p>\n
                    <p>\t\t\t\t{</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Welcome to J-IDETECT APPLICATION\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n\n\n
                </font>
            <b><i>Output</i></b>\n
                <font size="10">
                    <p>\t\tWelcome to J-IDETECT APPLICATION</p>\n\n\n
                </font>
            <b><i>Explanation:</i></b>\n
                <font size="12">
                    <p><b>1. Comments:</b> Comments are used for explaining code and are used in a similar manner in Java or C or C++. Compilers ignore the comment entries and do not execute them. Comments can be of a single line or multiple lines.</p>\n\n
                    <p><b>Single line Comments:</b></p>\n
                    <p>Syntax:</p>\n
                    <p>// Single line comment</p>\n\n
                    <p><b>Multi-line comments:</b></p>\n
                    <p>Syntax:</p>\n
                    <p>/* Multi line comments*/</p>\n\n
                    <p><b>2. import java.io.*:</b> This means all the classes of io package can be imported. Java io package provides a set of input and output streams for reading and writing data to files or other input or output sources.</p>\n\n
                    <p><b>3. class:</b> The class contains the data and methods to be used in the program. Methods define the behavior of the class. Class GFG has only one method Main in JAVA.</p>\n\n
                    <p><b>4. static void Main():</b> static keyword tells us that this method is accessible without instantiating the class.</p>\n\n
                    <p><b>5. void:</b> keywords tell that this method will not return anything. The main() method is the entry point of our application.</p>\n\n
                    <p><b>6. System.in:</b> This is the standard input stream that is used to read characters from the keyboard or any other standard input device.</p>\n\n
                    <p><b>7. System.out:</b> This is the standard output stream that is used to produce the result of a program on an output device like the computer screen.</p>\n\n
                    <p><b>8. println():</b> This method in Java is also used to display text on the console. It prints the text on the console and the cursor moves to the start of the next line at the console. The next printing takes place from the next line.</p>\n\n
                    <p><b>9. String []args:</b> This is the argument passed to the main function which is an array of strings with the array name args. One can choose their own flexible name but this name is used by many developers.</p>\n\n\n\n
                </font>
            <font size="20"><b><i>Java Hello World Program</i></b></font>\n\n
                <font size="12">
                    <p>Java is one of the most popular and widely used programming languages and platforms. Java is fast, reliable, and secure. Java is used in every nook and corner from desktop to web applications, scientific supercomputers to gaming consoles, cell phones to the Internet.</p>\n\n
                    <p>Java is easy to learn, and its syntax is simple and easy to understand. It is based on C++ (so easier for programmers who know C++).</p>\n\n
                    <p>The process of Java programming can be simplified in three steps:</p>\n
                        <ul>
                            <li>Create the program by typing it into a text editor and saving it to a file – 	HelloWorld.java.</li>\n
                            <li>Compile it by typing “javac HelloWorld.java” in the terminal window.</li>\n
                            <li>Execute (or run) it by typing “java HelloWorld” in the terminal window. The below-given program is the most simple program of Java printing “Hello 	World” to the screen. Let us try to understand every bit of code step by step.</li>
                        </ul>
                </font>
        </font>
    </string><string name="BasicofJava0">
        <font size="12">
            <p>The “Hello World!” program consists of three primary components: the HelloWorld class definition, the main method, and source code comments. The following explanation will provide you with a basic understanding of the code: </p>\n\n
            <p><b>1. Class definition</b> This line uses the keyword class to declare that a new class is being defined. </p>\n\n
            <p>class HelloWorld {</p>\n
            <p>//Statements</p>\n
            <p>}</p>\n\n
            <p><b>2. HelloWorld</b> It is an identifier that is the name of the class. The entire class definition, including all of its members, will be between the opening curly brace <b>“{”</b> and the closing curly brace <b>“}“</b>.</p>\n\n
            <p><b>3. main method</b> In the Java programming language, every application must contain a main method. The main function(method) is the entry point of your Java application, and it’s mandatory in a Java program. whose signature in Java is: </p>\n\n
            <p>public static void main(String[] args)</p>\n
                <ul>
                    <li><b>public</b> So that JVM can execute the method from anywhere.</li>\n
                    <li><b>static</b> The main method is to be called without an object. The modifiers public 	and static can be written in either order.</li>\n
                    <li><b>void</b> The main method doesn’t return anything.</li>\n
                    <li><b>main()</b> Name configured in the JVM. The main method must be inside the class definition. The compiler executes the codes starting always from the main 	function.</li>\n
                    <li><b>String[]</b> The main method accepts a single argument, i.e., an array of elements of type String.Like in C/C++, the main method is the entry point for your application and will subsequently invoke all the other methods required by your program.</li>\n\n
                </ul>
            <p>The next line of code is shown here. Notice that it occurs inside the main() method. </p>\n
            <p>System.out.println(<font color="#4d4dff">\"Hello, World\"</font>);</p>\n\n
            <p>This line outputs the string “Hello, World” followed by a new line on the screen. Output is accomplished by the built-in println( ) method. The <b>System</b> is a predefined class that provides access to the system, and <b>out</b> is the variable of type output stream connected to the console.</p>\n\n
        </font>
    </string><string name="VariablesinJavaTitle">
        <font size="30"><b>VARIABLES and DATATYPES in JAVA</b></font>
    </string><string name="VariablesinJava01">
        <font size="20"><b><i>Variables in Java</i></b></font>\n\n
            <font size="12">
                <p>\t\tIs a data container that saves the data values during Java program execution. Every variable is assigned a data type that designates the type and quantity of value it can hold. A variable is a memory location name for the data. </p>\n\n
                <p>A variable is a name given to a memory location. It is the basic unit of storage in a program.</p>\n
                    <ul>
                        <li>The value stored in a variable can be changed during program execution.</li>\n
                        <li>A variable is only a name given to a memory location. All the operations done 	on the variable affect that memory location.</li>\n
                        <li>In Java, all variables must be declared before use.</li>\n\n
                    </ul>
            </font>
        <font size="16"><b>How to declare variables?</b></font>\n\n
            <font size="12">
                <p>We can declare variables in Java as pictorially depicted below as a visual aid.</p>
            </font>
    </string><string name="VariablesinJava02">
        <font size="16">
            <font size="12">
                <p>From the image, it can be easily perceived that while declaring a variable, we need to take care of two things that are:</p>\n
                <p>1. <b>datatype</b>: Type of data that can be stored in this variable. </p>\n
                <p>2. <b>data_name</b>: Name given to the variable. </p>\n\n
                <p>In this way, a name can only be given to a memory location. It can be assigned values in two ways: </p>\n
                    <ul>
                        <li>Variable Initialization</li>\n
                        <li>Assigning value by taking input</li>\n\n
                    </ul>
            </font>
            <b>How to declare variables?</b>\n\n
            <font size="12">
                <p>It can be perceived with the help of 3 components that are as follows: </p>\n
                    <ul>
                        <li><b>datatype</b> Type of data that can be stored in this variable.</li>\n
                        <li><b>variable_name</b> Name given to the variable.</li>\n
                        <li><b>value</b> It is the initial value stored in the variable.</li>
                    </ul>
            </font>
        </font>
    </string><string name="VariablesinJava03">
        <font size="16"><b>Illustrations:</b></font>\n\n
        <font size="12">
            <p>\t\t\t\tfloat simpleInterest; </p>\n
            <p>\t\t\t\t// Declaring float variable</p>\n
            <p>\t\t\t\tint time = 10, speed = 20; </p>\n
            <p>\t\t\t\t// Declaring and initializing integer variable</p>\n
            <p>\t\t\t\tchar var = \'h\'; </p>\n
            <p>\t\t\t\t// Declaring and initializing character variable</p>\n\n
        </font>
        <font size="16"><b>Types of Variables in Java:</b></font>\n\n
        <font size="12">
            <p>Now let us discuss different types of variables which are listed as follows: </p>\n
            <p>\t\t\t\t1. Local Variables</p>\n
            <p>\t\t\t\t2. Instance Variables</p>\n
            <p>\t\t\t\t3. Static Variables</p>
        </font>
    </string><string name="VariablesinJava04">
        <font size="12">
            <p>Let us discuss the traits of every type of variable listed here in detail.</p>\n\n
            <p><b>1. Local Variables </b></p>\n
            <p>A variable defined within a block or method or constructor is called a local variable.</p>\n
                <ul>
                    <li>These variables are created when the block is entered, or the function is called and destroyed after exiting from the block or when the call returns from the function.</li>\n
                    <li>The scope of these variables exists only within the block in which the variables are declared, i.e., we can access these variables only within that block.</li>\n
                    <li>Initialization of the local variable is mandatory before using it in the defined scope.</li>\n\n
                </ul>
        <font size="10">
            <p>JAVA</p>\n
            <p><font color="#2eb82e">\t\t/* package whatever do not write package name here */</font></p>\n
            <p><font color="#2eb82e">\t\t// Importing classes from packages</font></p>\n
            <p><font color="#3399ff">\t\timport</font> java.io.*</p>\n\n
            <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
            <p>\t\t{</p>\n
            <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args)</p>\n
            <p>\t\t\t\t{</p>\n
            <p><font color="#2eb82e">\t\t\t\t\t\t// Declared a local variable</font></p>\n
            <p><font color="#3399ff">\t\t\t\t\t\tint</font> var = <font color="#2eb82e">10</font>;</p>\n
            <p><font color="#2eb82e">\t\t\t\t\t\t// This variable is local to this main method only</font></p>\n
            <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Local Variable: \"</font> + var);</p>\n
            <p>\t\t\t\t}</p>\n
            <p>\t\t}</p>\n\n
        <b><i>Output</i></b>\n
            <p>\t\tLocal Variable: 10</p>\n\n\n
        </font>
            <p><b>2. Instance Variables</b></p>\n
                <p>Instance variables are non-static variables and are declared in a class outside of any method, constructor, or block. </p>\n
                <ul>
                    <li>As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.</li>\n
                    <li>Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier, then the default access specifier will be used.</li>\n
                    <li>Initialization of an instance variable is not mandatory. Its default value is 0.</li>\n
                    <li>Instance variables can be accessed only by creating objects.</li>\n\n
                </ul>
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t/* package whatever do not write package name here */</font></p>\n
                    <p><font color="#2eb82e">\t\t// Importing classes from packages</font></p>\n
                    <p><font color="#3399ff">\t\timport</font> java.io.*</p>\n\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Declared Instance Variable</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic</font> String geek;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Default Constructor</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic</font> GFG</p>\n
                    <p>\t\t\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// initializing Instance Variable</font></p>\n
                    <p><font color="#3399ff">\t\t\t\t\t\tthis</font>.geek = <font color="#4d4dff">\"Shubham Jain\"</font>;</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args)</p>\n
                    <p>\t\t\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Object creation</font></p>\n
                    <p>\t\t\t\t\t\tGFG name =<font color="#3399ff"> new</font> GFG();</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Displaying O/P</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Geek name is: \"</font> + name.geek);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n\n
                    <b><i>Output</i></b>\n
                    <p>\t\tGeek name is: Shubham Jain</p>\n\n\n
            </font>
            <p><b>3. Static Variables</b></p>\n
                <p>Static variables are also known as class variables.  </p>\n\n
                <p>These variables are declared similarly as instance variables. The difference is that static variables are declared using the static keyword within a class outside of any method, constructor or block.</p>\n
                <ul>
                    <li>Unlike instance variables, we can only have one copy of a static variable per class, irrespective of how many objects we create.</li>\n
                    <li>Static variables are created at the start of program execution and destroyed automatically when execution ends.</li>\n
                    <li>Initialization of an instance variable is not mandatory. Its default value is 0.</li>\n
                    <li>If we access a static variable like an instance variable (through an object), the compiler will show a warning message, which won’t halt the program. The compiler will replace the object name with the class name automatically.</li>\n
                    <li>If we access a static variable without the class name, the compiler will automatically append the class name.</li>\n\n
                </ul>

            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t/* package whatever do not write package name here */</font></p>\n
                    <p><font color="#3399ff">\t\timport</font> java.io.*</p>\n\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Declared Instance Variable</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static</font> String geek = <font color="#4d4dff">\"Shubham Jain\"</font> ;</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// geek variable can be accessed without object creation</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Displaying O/P</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t// GFG.geek --> using the static variable</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Geek name is: \"</font> + GFG.geek);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tGeek Name is : Shubham Jain</p>\n\n\n
            </font>
                <p>Differences between the Instance variables and the Static variables</p>\n
                <p>Now let us discuss the differences between the Instance variables and the Static variables: </p>\n
                <ul>
                    <li>Each object will have its own copy of an instance variable, whereas we can only have one copy of a static variable per class, irrespective of how many objects we create.</li>\n
                    <li>Changes made in an instance variable using one object will not be reflected in other objects as each object has its own copy of the instance variable. In the case of a static variable, changes will be reflected in other objects as static variables are common to all objects of a class.</li>\n
                    <li>We can access instance variables through object references, and static variables can be accessed directly using the class name.</li>\n\n
                </ul>
                <p><b>Syntax:</b> Static and instance variables</p>\n\n
                <p>\t\tclass GFG</p>\n
                <p>\t\t{</p>\n
                <p>\t\t\t\t// Static variable</p>\n
                <p>\t\t\t\tstatic int a; </p>\n
                <p>\t\t\t\t// Instance variable</p>\n
                <p>\t\t\t\tint b; </p>\n
                <p>\t\t}</p>\n\n
                <p>This article is contributed by <b>Harsh Agarwal</b>. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n\n\n
                <font size="20"><b><i>Data types in Java</i></b></font>\n\n
                <p><b>Data types </b> are different sizes and values that can be stored in the variable that is made as per convenience and circumstances to cover up all test cases. Also, let us cover up other important ailments that there are majorly two types of languages that are as follows:</p>\n
                <p>1.	First, one is a <b>Statically typed language</b> where each variable and expression type is already known at compile time. Once a variable is declared to be of a certain data type, it cannot hold values of other data types. For example C, C++, Java.</p>\n
                <p>2.	The other is Dynamically typed languages. These languages can receive different data types over time. For example Ruby, Python</p>\n\n
                <p>Java is <b>statically typed and also a strongly typed language</b> because, in Java, each type of data (such as integer, character, hexadecimal, packed decimal, and so forth) is predefined as part of the programming language and all constants or variables defined for a given program must be described with one of the data types.</p>\n
        </font>
    </string><string name="VariablesinJava05">
        <font size="12">
            <p>Java has two categories in which data types are segregated </p>\n
            <p>1. <b>Primitive Data Type:</b> such as boolean, char, int, short, byte, long, float, and double</p>\n
            <p>2. <b>Non-Primitive Data Type or Object Data type:</b> such as String, Array, etc.</p>\n
        </font>
    </string><string name="VariablesinJava06">
        <font size="12">
            <p>Primitive data are only single values and have no special capabilities. There are<b>8 primitive data types</b>. They are depicted below in tabular format below as follows: </p>\n
        </font>
    </string><string name="VariablesinJava07">
        <font size="12">
            <p>Let us discuss and implement each one of the following data types that are as follows:</p>\n\n
            <p><b>Type 1: boolean</b></p>\n
            <p>Boolean data type represents only one bit of information <b>either true or false</b> which is intended to represent the two truth values of logic and Boolean algebra, but the size of the boolean data type is <b>virtual machine-dependent</b>. Values of type boolean are not converted implicitly or explicitly (with casts) to any other type. But the programmer can easily write conversion code.</p>\n\n
            <p><b>Syntax: </b></p>\n
            <p>boolean booleanVar;</p>\n
            <p><b>Size: </b> Virtual machine dependent</p>\n
            <p><b>Values: </b> Boolean such as true, false</p>\n
            <p><b>Default Value: </b> false</p>\n
            <p><b>Example:</b></p>\n\n
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java Program to Demonstrate Boolean Primitive DataType</font></p>\n
                    <p><font color="#2eb82e">\t\t// Class</font></p>\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main driver method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//Boolean data type is a data type that has one of two possible values (usually denoted true and false).</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Setting boolean to false and true initially</font></p>\n
                    <p><font color="#3399ff">\t\t\t\t\t\tboolean</font> a = <font color="#33a3ff">false</font>;</p>\n
                    <p><font color="#3399ff">\t\t\t\t\t\tboolean</font> b = <font color="#33a3ff">true</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// If condition holds</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif</font> (b == <font color="#33a3ff">true</font>) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// Print statement</font></p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Hi Geek\"</font>);</p>\n
                    <p>\t\t\t\t\t\t}</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// If condition holds</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif</font> (a == <font color="#33a3ff">false</font>) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// Print statement</font></p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Hello Geek\"</font>);</p>\n
                    <p>\t\t\t\t\t\t}</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tHi Geek\n\t\tHello Geek</p>\n\n\n
            </font>
            <p><b>Type 2: byte</b></p>\n
            <p>The byte data type is an 8-bit signed two’s complement integer. The byte data type is useful for saving memory in large arrays.</p>\n\n
            <p><b>Syntax: </b></p>\n
            <p>byte byteVar;</p>\n
            <p><b>Size: </b> 1 byte (8 bits)</p>\n
            <p><b>Values: </b> -128 to 127</p>\n
            <p><b>Default Value: </b> 0</p>\n
            <p><b>Example:</b></p>\n\n
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java Program to demonstrate Byte Data Type</font></p>\n
                    <p><font color="#2eb82e">\t\t// Class</font></p>\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main driver method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tbyte</font> a = <font color="#2eb82e">126;</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// byte is 8 bit value</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(a);</p>\n
                    <p>\t\t\t\t\t\ta++;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(a);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// It overflows here because</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// byte can hold values from -128 to 127</font></p>\n
                    <p>\t\t\t\t\t\ta++;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(a);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Looping back within the range</font></p>\n
                    <p>\t\t\t\t\t\ta++;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(a);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\t126\n\t\t127\n\t\t-128\n\t\t-127</p>\n\n\n
            </font>
            <p><b>Type 3: short</b></p>\n
            <p>The short data type is a 16-bit signed two’s complement integer. Similar to byte, use a short to save memory in large arrays, in situations where the memory savings actually matters.</p>\n\n
            <p><b>Syntax: </b></p>\n
            <p>short shortVar;</p>\n
            <p><b>Size: </b> 2 byte (16 bits)</p>\n
            <p><b>Values: </b> -32, 768 to 32, 767 (inclusive)</p>\n
            <p><b>Default Value: </b> 0</p>\n\n
            <p><b>Type 4: int</b></p>\n
            <p>It is a 32-bit signed two\’s complement integer.</p>\n
            <p><b>Syntax: </b></p>\n
            <p>int intVar;</p>\n
            <p><b>Size: </b> 4 byte ( 32 bits )</p>\n
            <p><b>Values: </b> -2, 147, 483, 648 to 2, 147, 483, 647 (inclusive)</p>\n
            <p><b>Note:  </b> The default value is \‘0\’</p>\n
            <p><b>Remember: </b> In Java SE 8 and later, we can use the int data type to represent an unsigned 32-bit integer, which has a value in the range [0, 232-1]. Use the Integer class to use the int data type as an unsigned integer.</p>\n\n
            <p><b>Type 5: long</b></p>\n
            <p>The range of a long is quite large. The long data type is a 64-bit two’s complement integer and is useful for those occasions where an int type is not large enough to hold the desired value.</p>\n
            <p><b>Syntax: </b></p>\n\n
            <p><b>Type 6: short</b></p>\n
            <p>The float data type is a single-precision long longVar;</p>\n\n
            <p><b>Size: </b> 8 byte (64 bits)</p>\n
            <p><b>Values: </b> {-9, 223, 372, 036, 854, 775, 808} to {9, 223, 372, 036, 854, 775, 807} (inclusive)</p>\n
            <p><b>Note: </b> The default value is ‘0’.</p>\n
            <p><b>Remember: </b> In Java SE 8 and later, you can use the long data type to represent an unsigned 64-bit long, which has a minimum value of 0 and a maximum value of 264-1. The Long class also contains methods like comparing Unsigned, divide Unsigned, etc to support arithmetic operations for unsigned long. </p>\n\n
            <p>32-bit IEEE 754 floating-point. Use a float (instead of double) if you need to save memory in large arrays of floating-point numbers.</p>\n
            <p><b>Syntax: </b></p>\n
            <p>float floatVar;</p>\n
            <p><b>Size: </b> 4 byte (32 bits)</p>\n
            <p><b>Value: </b> upto 7 decimal digits</p>\n
            <p><b>Note: </b> The default value is \‘0.0\’</p>\n
            <p><b>Example:</b></p>\n\n
             <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java Program to Illustrate Float Primitive Data Type</font></p>\n
                    <p><font color="#2eb82e">\t\t// Importing required classes</font></p>\n
                 <p><font color="#3399ff">\t\timport</font> java.io.*;</p>\n
                    <p><font color="#2eb82e">\t\t// Class</font></p>\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main driver method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Declaring and initializing float value</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// float value1 = 9.87;</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Print statement</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// System.out.println(value1);</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tfloat </font>value2 = <font color="#2eb82e">9.87</font>f;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(value2);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\t9.87</p>\n\n\n
            </font>
                <p>If we uncomment lines no 14,15,16 then the output would have been totally different as we would have faced an error.</p>\n
        </font>
    </string><string name="VariablesinJava08">
        <font size="12">
            <p><b>Type 7: double</b></p>\n
            <p>The double data type is a double-precision 64-bit IEEE 754 floating-point. For decimal values, this data type is generally the default choice.</p>\n
            <p><b>Syntax: </b></p>\n
            <p>double doubleVar;</p>\n
            <p><b>Size: </b> 8 bytes or 64 bits</p>\n
            <p><b>Values: </b> Upto 16 decimal digits</p>\n
            <p><b>Note:  </b></p>\n
             <ul>
                    <li>The default value is taken as \‘0.0\’.</li>\n
                    <li>C• Both float and double data types were designed especially for scientific calculations, where approximation errors are acceptable. If accuracy is the most prior concern then, it is recommended not to use these data types and use BigDecimal class instead. </li>\n
                </ul>
            <p>It is recommended to go through rounding off errors in java.</p>\n\n
            <p><b>Type 8: char</b></p>\n
            <p>The char data type is a single 16-bit Unicode character.</p>\n
            <p><b>Syntax: </b></p>\n
            <p>char charVar;</p>\n
            <p><b>Size: </b> 2 byte (16 bits)</p>\n
            <p><b>Values: </b> U\‘\\u0000\’ (0) to \‘\\uffff\’ (65535)</p>\n
            <p><b>Note:  </b>The default value is \‘\\u0000\’</p>\n\n
            <p><b>You must be wondering why is the size of char 2 bytes in Java? </b></p>\n\n
            <p>So, in other languages like C/C++ uses only ASCII characters, and to represent all ASCII characters 8-bits is enough. But java uses the <b>Unicode system not the ASCII code system</b> and to represent the Unicode system 8 bits is not enough to represent all characters so java uses 2 bytes for characters. <b>Unicode</b>Unicode defines a fully international character set that can represent most of the world’s written languages. It is a unification of dozens of character sets, such as Latin, Greeks, Cyrillic, Katakana, Arabic, and many more.</p>\n
            <p><b>Example:</b></p>\n\n
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java Program to Demonstrate Char Primitive Data Type</font></p>\n
                    <p><font color="#2eb82e">\t\t// Class</font></p>\n
                    <p><font color="#3399ff">\t\tclass</font> GFG</p>\n
                    <p>\t\t{</p>\n
                    <p><font color="#2eb82e">\t\t\t\t// Main driver method</font></p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Creating and initializing custom character</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tchar</font> a = <font color="#3399ff">\'G\'</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Integer data type is generally</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// used for numeric values</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint</font> i = <font color="#2eb82e">89</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// use byte and short</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// if memory is a constraint</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tbyte</font> b = <font color="#2eb82e">4</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// this will give error as number is</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// larger than byte range</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// byte b1 = 7888888955;</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tshort</font> s = <font color="#2eb82e">56</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// this will give error as number is</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// larger than short range</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// short s1 = 87878787878;</font></p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// by default fraction value</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// is double in java</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tdouble</font> d = <font color="#2eb82e">4.355453532</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// for float use \'f\' as suffix as standard</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tfloat</font> f = <font color="#2eb82e">4.7333434f</font>;</p>\n\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// need to hold big range of numbers then we need this data type</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tlong</font> l = <font color="#2eb82e">12121</font>;</p>\n\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"char: \"</font> + a);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"integer: \"</font> + i);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"byte: \"</font> + b);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"short: \"</font> + s);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"float: \"</font> + f);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"double: \"</font> + d);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"long: \"</font> + l);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tchar: G\n\t\tinteger: 89\n\t\tbyte: 4\n\t\tshort: 56\n\t\tfloat: 4.7333436\n\t\tdouble: 4.355453532\n\t\tlong: 12121</p>\n\n\n
            </font>
        </font>
    </string><string name="VariablesinJava09">
        <font size="12">
            <p>The <b>Reference Data Types</b> will contain a memory address of variable values because the reference types won’t store the variable value directly in memory. They are strings, objects, arrays, etc. </p>\n\n
            <p><b>A:</b> Strings </p>\n
            <p>Strings are defined as an array of characters. The difference between a character array and a string in Java is, that the string is designed to hold a sequence of characters in a single variable whereas, a character array is a collection of separate char type entities. Unlike C/C++, Java strings are not terminated with a null character.</p>\n
            <p><b>Syntax: </b>Declaring a string</p>\n
            <p>&lt;String_Type\> &lt;string_variable\> = \“&lt;sequence_of_string\>\”;</p>\n\n
            <p><b>Example: </b></p>\n
            <p>\t\t// Declare String without using new operator </p>\n
            <p>\t\tString s = \"GeeksforGeeks\"; </p>\n\n
            <p>\t\t// Declare String using new operator </p>\n
            <p>\t\tString s1 = new String(\"GeeksforGeeks\");</p>\n\n
            <p><b>B:</b> Class</p>\n
            <p>A class is a user-defined blueprint or prototype from which objects are created.  It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order: </p>\n\n
            <p>1. <b>Modifiers: </b>A class can be public or has default access. Refer to access specifiers for classes or interfaces in Java</p>\n
            <p>2. <b>Class name: </b>The name should begin with an initial letter (capitalized by convention).</p>\n
            <p>3. <b>Superclass(if any):  </b>The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.</p>\n
            <p>4. <b>Interfaces(if any):  </b>A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.</p>\n
            <p>5. <b>Body:  </b>The class body is surrounded by braces, { }.</p>\n\n
            <p><b>C:</b> Object</p>\n
            <p>It is a basic unit of Object-Oriented Programming and represents real-life entities.  A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :</p>\n\n
            <p>1. <b>State: </b>It is represented by the attributes of an object. It also reflects the properties of an object.</p>\n
            <p>2. <b>Behavior: </b> It is represented by the methods of an object. It also reflects the response of an object to other objects.</p>\n
            <p>3. <b>Identity: </b>It gives a unique name to an object and enables one object to interact with other objects.</p>\n\n
            <p><b>D:</b> Interface</p>\n
            <p>Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body).</p>\n
            <ul>
                <li>Interfaces specify what a class must do and not how. It is the blueprint of the class.</li>\n
                <li>An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.</li>\n
                <li>If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.</li>\n
                <li>A Java library example is Comparator Interface. If a class implements this interface, then it can be used to sort a collection.</li>\n\n
            </ul>
            <p><b>E:</b> Array</p>\n
            <p>An array is a group of like-typed variables that are referred to by a common name. Arrays in Java work differently than they do in C/C++. The following are some important points about Java arrays. </p>\n
            <ul>
                <li>In Java, all arrays are dynamically allocated. (discussed below)</li>\n
                <li>Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using size.</li>\n
                <li>A Java array variable can also be declared like other variables with [] after the data type.</li>\n
                <li>The variables in the array are ordered and each has an index beginning from 0.</li>\n
                <li>Java array can also be used as a static field, a local variable, or a method 	parameter.</li>\n
                <li>The size of an array must be specified by an int value and not long or short.</li>\n
                <li>The direct superclass of an array type is Object.</li>\n
                <li>Every array type implements the interfaces Cloneable and java.io.Serializable.</li>\n\n
            </ul>
            <p>This article is contributed by <b>Shubham Agrawal</b>. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n
        </font>
    </string><string name="OperatorJava">
        <font size="30"><b>OPERATORS IN JAVA</b></font>
    </string><string name="OperatorJava1">
        <font size="12">
            <p>Java provides many types of operators which can be used according to the need. They are classified based on the functionality they provide. Some of the types are:</p>\n
            <p>1.	Arithmetic Operators</p>\n
            <p>2.	Unary Operators</p>\n
            <p>3.	Assignment Operator</p>\n
            <p>4.	Relational Operators</p>\n
            <p>5.	Logical Operators</p>\n
            <p>6.	Ternary Operator</p>\n
            <p>7.	Bitwise Operators</p>\n
            <p>8.	Shift Operators</p>\n
            <p>9.	instance of operator</p>\n\n
            <p>1. <b>Arithmetic Operators: </b> They are used to perform simple arithmetic operations on primitive data types. </p>\n
            <ul>
                <li>* : Multiplication</li>\n
                <li>/ : Division</li>\n
                <li>% : Modulo</li>\n
                <li>+ : Addition.</li>\n
                <li>– : Subtraction</li>\n\n
            </ul>
            <p>2. <b>Unary Operators: </b> Unary operators need only one operand. They are used to increment, decrement or negate a value. </p>\n
            <ul>
                <li><b>– : Unary minus </b>, used for negating the values.</li>\n
                <li><b>+ : Unary plus </b>, indicates the positive value (numbers are positive without this, however). It performs an automatic conversion to int when the type of its operand is the byte, char, or short. This is called unary numeric promotion.</li>\n
                <li><b>++ : Increment operator </b>, used for incrementing the value by 1. There are two varieties of increment operators.</li>\n
                <li><b>Post-Increment: </b> Value is first used for computing the result and then incremented.</li>\n
                <li><b>Pre-Increment: </b> Value is incremented first, and then the result is computed.</li>\n
                <li><b>— : Decrement operator </b>, used for decrementing the value by 1. There are two varieties of decrement operators. </li>\n
                <li><b>Post-decrement: </b> Value is first used for computing the result and then decremented.</li>\n
                <li><b>Pre-Decrement: </b> Value is decremented first, and then the result is computed.</li>\n
                <li><b>! : Logical not operator </b>, used for inverting a boolean value.</li>\n\n
            </ul>
            <p>3. <b>Assignment Operator: \‘=\’ </b> Assignment operator is used to assigning a value to any variable. It has a right to left associativity, i.e. value given on the right-hand side of the operator is assigned to the variable on the left, and therefore right-hand side value must be declared before using it or should be a constant. </p>\n\n
            <p>The general format of the assignment operator is:</p>\n
            <p>variable = value;</p>\n\n
            <p>In many cases, the assignment operator can be combined with other operators to build a shorter version of the statement called a <b>Compound Statement</b>. For example, instead of a = a+5, we can write a <b>+= 5</b>. </p>\n
            <ul>
                <li><b>+=, </b>for adding left operand with right operand and then assigning it to the variable on the left.</li>\n
                <li><b>-=, </b>for subtracting right operand from left operand and then assigning it to the variable on the left.</li>\n
                <li><b>*=, </b>for multiplying left operand with right operand and then assigning it to the variable on the left.</li>\n
                <li><b>/=, </b>for dividing left operand by right operand and then assigning it to the variable on the left.</li>\n
                <li><b>%=, </b>for assigning modulo of left operand by right operand and then assigning it to the variable on the left.</li>\n\n
            </ul>
            <p>4. <b>Relational Operators: </b> These operators are used to check for relations like equality, greater than, and less than. They return boolean results after the comparison and are extensively used in looping statements as well as conditional if-else statements. The general format is, </p>\n\n
            <p>variable relation_operator value</p>\n
            <ul>
                <li>Some of the relational operators are- </li>\n
                <li><b>==, Equal to </b>returns true if the left-hand side is equal to the right-hand side.</li>\n
                <li><b>!=, Not Equal to </b>returns true if the left-hand side is not equal to the right-hand side.</li>\n
                <li><b>&lt;, less than: </b>returns true if the left-hand side is less than the right-hand side.</li>\n
                <li><b>&lt;=, less than or equal to </b>returns true if the left-hand side is less than or equal to the right-hand side.</li>\n
                <li><b>>, Greater than: </b>returns true if the left-hand side is greater than the right-hand side.</li>\n
                <li><b>>=, Greater than or equal to  </b>returns true if the left-hand side is greater than or equal to the right-hand side.</li>\n\n
            </ul>
            <p>5. <b>Logical Operators: </b> These operators are used to perform \“logical AND\” and \“logical OR\” operations, i.e., a function similar to AND gate and OR gate in digital electronics. One thing to keep in mind is the second condition is not evaluated if the first one is false, i.e., it has a short-circuiting effect. Used extensively to test for several conditions for making a decision. Java also has \“Logical NOT\”, which returns true when the condition is false and vice-versa</p>\n\n
            <p>Conditional operators are:</p>\n
            <ul>
                <li><b>&amp;&amp;, Logical AND: </b>returns true when both conditions are true.</li>\n
                <li><b>||, Logical OR: </b>returns true if at least one condition is true.</li>\n
                <li><b>!, Logical NOT: </b>returns true when a condition is false and vice-versa</li>\n\n
            </ul>
            <p>6. <b>Ternary operator: </b> Ternary operator is a shorthand version of the if-else statement. It has three operands and hence the name ternary.</p>\n\n
            <p>The general format is:</p>\n
            <p>condition ? if true : if false</p>\n\n
            <p>The above statement means that if the condition evaluates to true, then execute the statements after the \‘?\’ else execute the statements after the \‘:\’.</p>\n\n
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate</font></p>\n
                    <p><font color="#2eb82e">\t\t// max of three numbers using</font></p>\n
                    <p><font color="#2eb82e">\t\t// ternary operator.</font></p>\n
                    <p><font color="#3399ff">\t\tpublic class </font>operators {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>a = <font color="#2eb82e">20</font>, b = <font color="#2eb82e">10</font>, c = <font color="#2eb82e">30</font>, result;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// result holds max of three</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// numbers</font></p>\n
                    <p>\t\t\t\t\t\tresult = ((a > b) ? (a > c) ? a : c : (b > c) ? b : c);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Max of three numbers = \"</font> + result);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tMax of three numbers = 30</p>\n\n\n
            </font>
            <p>7. <b>Bitwise Operators: </b> These operators are used to perform the manipulation of individual bits of a number. They can be used with any of the integer types. They are used when performing update and query operations of the Binary indexed trees. </p>\n\n
            <p>Conditional operators are:</p>\n
            <ul>
                <li><b>&amp;, Bitwise AND operator: </b>returns bit by bit AND of input values.</li>\n
                <li><b>|, Bitwise OR operator: </b>returns bit by bit OR of input values.</li>\n
                <li><b>^, Bitwise XOR operator: </b>returns bit-by-bit XOR of input values.</li>\n
                <li><b>~, Bitwise Complement Operator: </b>This is a unary operator which returns the one’s complement representation of the input value, i.e., with all bits inverted.</li>\n\n
            </ul>
            <p>8. <b>Shift Operators: </b> These operators are used to shift the bits of a number left or right, thereby multiplying or dividing the number by two, respectively. They can be used when we have to multiply or divide a number by two. General format- number shift_op number_of_places_to_shift;</p>\n\n
            <ul>
                <li><b>&lt;&lt;, Left shift operator: </b>shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as multiplying the number with some power of two.</li>\n
                <li><b>>>, Signed Right shift operator: </b>shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of the initial number. Similar effect as dividing the number with some power of two.</li>\n
                <li><b>>>>, Unsigned Right shift operator: </b>shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.</li>\n\n
            </ul>
            <p>9. <b>Instanceof operator: </b> The instance of the operator is used for type checking. It can be used to test if an object is an instance of a class, a subclass, or an interface. General format-  </p>\n\n
            <p>object instance of class/subclass/interface</p>\n\n
            <font size="10">
                <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate</font></p>\n
                    <p><font color="#2eb82e">\t\t// instance of operator</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>operators {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p>\t\t\t\t\t\tPerson obj1 = <font color="#3399ff">new</font> Person();</p>\n
                    <p>\t\t\t\t\t\tPerson obj2 = <font color="#3399ff">new</font> Boy();</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// As obj is of type person, it is not an</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// instance of Boy or interface</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj1 instanceof Person: \"</font> + (obj1 <font color="#3399ff">instanceof</font> Person));</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj1 instanceof Person: \"</font> + (obj1 <font color="#3399ff">instanceof</font> Boy));</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj1 instanceof MyInterface: \"</font> + (obj1 <font color="#3399ff">instanceof</font> MyInterface));</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Since obj2 is of type boy,</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// whose parent class is person</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// and it implements the interface Myinterface</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// it is instance of all of these classes</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj2 instanceof Person: \"</font> + (obj1 <font color="#3399ff">instanceof</font> Person));</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj2 instanceof Person: \"</font> + (obj1 <font color="#3399ff">instanceof</font> Boy));</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"obj2 instanceof MyInterface: \"</font> + (obj1 <font color="#3399ff">instanceof</font> MyInterface));</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <p><font color="#3399ff">\t\tclass </font>Person {</p>\n
                    <p>\t\t}</p>\n
                    <p><font color="#3399ff">\t\tclass </font>Boy <font color="#3399ff">extends </font>Person <font color="#3399ff">implements </font>MyInterface {</p>\n
                    <p>\t\t}</p>\n
                    <p><font color="#3399ff">\t\tinterface</font>MyInterface {</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tobj1 instanceof Person: true\n\t\tobj1 instanceof Boy: false\n\t\tobj1 instanceof MyInterface: false\n\t\tobj2 instanceof Person: true\n\t\tobj2 instanceof Boy: true\n\t\tobj2 instanceof MyInterface: true</p>
            </font>
        </font>
    </string><string name="OperatorJava2">
        <font size="12">
            <p>Precedence and associative rules are used when dealing with hybrid equations involving more than one type of operator. In such cases, these rules determine which part of the equation to consider first, as there can be many different valuations for the same equation. The below table depicts the precedence of operators in decreasing order as magnitude, with the top representing the highest precedence and the bottom showing the lowest precedence.</p>\n
        </font>
    </string><string name="OperatorJava3">
        <font size="12">
            <p>Interesting Questions about Operators </p>\n
            <p>1. <b>Precedence and Associativity: </b>There is often confusion when it comes to hybrid equations which are equations having multiple operators. The problem is which part to solve first. There is a golden rule to follow in these situations. If the operators have different precedence, solve the higher precedence first. If they have the same precedence, solve according to associativity, that is, either from right to left or from left to right. The explanation of the below program is well written in comments within the program itself.</p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>operators {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>a = <font color="#2eb82e">20</font>, b = <font color="#2eb82e">10</font>, c = <font color="#2eb82e">0</font>, d = <font color="#2eb82e">20</font>, e = <font color="#2eb82e">40</font>, f = <font color="#2eb82e">30</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// precedence rules for arithmetic operators.</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// (* = / = %) > (+ = -)</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// prints a+(b/d)</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"a + b / d = \"</font> + (a + b / d));</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// if same precedence then associative</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// rules are followed.</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// e/f -> b*d -> a+(b*d) -> a+(b*d)-(e/f))</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"a + b * d - e / f = \"</font> + (a + b * d - e / f));</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\ta + b / d = 20\n\t\ta + b * d - e / f = 219</p>\n\n\n
            </font>
            <p>2. <b>Be a Compiler: </b>Compiler in our systems uses a lex tool to match the greatest match when generating tokens. This creates a bit of a problem if overlooked. For example, consider the statement <b>a=b+++c</b>; too many of the readers might seem to create a compiler error. But this statement is absolutely correct as the token created by lex are a, =, b, ++, +, c. Therefore, this statement has a similar effect of first assigning b+c to a and then incrementing b. Similarly, a=b+++++c; would generate an error as tokens generated are a, =, b, ++, ++, +, c. which is actually an error as there is no operand after the second unary operand.</p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>operators {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>a = <font color="#2eb82e">20</font>, b = <font color="#2eb82e">10</font>, c = <font color="#2eb82e">0</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// a=b+++c is compiled as</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// b++ +c</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// a=b+c then b=b+1</font></p>\n
                    <p>\t\t\t\t\t\ta = b++ + c;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Value of a(b+c), \"</font> + <font color="#4d4dff">\"b(b+1), c = \"</font> + a + <font color="#4d4dff">\", "\"</font> + c);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// a=b+++++c is compiled as</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// b++ ++ +c</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// which gives error.</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// a=b+++++c;</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// System.out.println(b+++++c);</font></p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tValue of a(b+c),  b(b+1), c = 10, 11, 0</p>\n\n\n
            </font>
            <p>3. <b>Using + over (): </b>When using + operator inside <b>system.out.println()</b> make sure to do addition using parenthesis. If we write something before doing addition, then string addition takes place, that is, associativity of addition is left to right, and hence integers are added to a string first producing a string, and string objects concatenate when using +. Therefore it can create unwanted results.</p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>operators {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>x = <font color="#2eb82e">5</font>, y = <font color="#2eb82e">8</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// concatenates x and y as</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// first x is added to \"concatenation (x+y) = \"</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// producing \"concatenation (x+y) = 5\"</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// and then 8 is further concatenated.</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Concatenation (x+y)= \"</font> + x + y);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// addition of x and y</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Addition (x+y) = \"</font> + (x + y));</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tConcatenation (x+y)= 58\n\t\tAddition (x+y) = 13</p>\n\n\n
            </font>
            <p>This article is contributed by <b>Rishabh Mahrsee</b>. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the </p>\n
        </font>
    </string><string name="PackJava">
        <font size="30"><b>PACKAGES IN JAVA</b></font>
    </string><string name="PackJava1">
    <font size="12">
        <p><b>Package </b>in Java is a mechanism to encapsulate a group of classes, sub packages and interfaces. Packages are used for:</p>\n
        <ul>
            <li>Preventing naming conflicts. For example there can be two classes with name Employee in two packages, college.staff.cse.Employee and college.staff.ee.Employee</li>\n
            <li>Making searching/locating and usage of classes, interfaces, enumerations and annotations easier</li>\n
            <li>Providing controlled access: protected and default have package level access control. A protected member is accessible by classes in the same package and its subclasses. A default member (without any access specifier) is accessible by classes in the same package only.</li>\n
            <li>Packages can be considered as data encapsulation (or data-hiding).</li>\n\n
        </ul>
        <p>All we need to do is put related classes into packages. After that, we can simply write an import class from existing packages and use it in our program. A package is a container of a group of related classes where some of the classes are accessible are exposed and others are kept for internal purpose. We can reuse existing classes from the packages as many time as we need it in our program.</p>\n
    </font>
    </string><string name="PackJava2">
    <font size="12">
        <p>Package names and directory structure are closely related. For example if a package name is college.staff.cse, then there are three directories, college, staff and cse such that cse is present in staff and staff is present college. Also, the directory college is accessible through CLASSPATH variable, i.e., path of parent directory of college is present in CLASSPATH. The idea is to make sure that classes are easy to locate.</p>\n\n
        <p><b>Package naming conventions : </b>Packages are named in reverse order of domain names, i.e., org.geeksforgeeks.practice. For example, in a college, the recommended convention is college.tech.cse, college.tech.ee, college.art.history, etc.</p>\n
        <p><b>Adding a class to a Package : </b>We can add more classes to a created package by using package name at the top of the program and saving it in the package directory. We need a new java file to define a public class, otherwise we can add the new class to an existing .java file and recompile it.</p>\n
        <p><b>Subpackages : </b>Packages that are inside another package are the subpackages. These are not imported by default, they have to imported explicitly. Also, members of a subpackage have no access privileges, i.e., they are considered as different package for protected and default access specifiers.</p>\n\n
        <p><b>Example :</b></p>\n
        <p>import java.util.*;</p>\n
        <p><b>util</b> is a subpackage created inside <b>java</b> package.</p>\n
    </font>
    </string><string name="PackJava3">
    <font size="12">
        <p>Consider following two statements :</p>\n\n
        <p>// import the Vector class from util package.</p>\n
        <p>import java.util.vector; </p>\n
        <p>// import all the classes from util package</p>\n\n
        <p>import java.util.*; </p>\n\n
        <ul>
            <li>First Statement is used to import <b>Vector</b> class from <b>util</b> package which is contained inside <b>java</b>.</li>\n
            <li>Second statement imports all the classes from <b>util</b> package.</li>\n\n
        </ul>
        <p>// All the classes and interfaces of this package</p>\n
        <p>// will be accessible but not subpackages.</p>\n
        <p>import package.*;</p>\n
        <p>// Only mentioned class of this package will be accessible.</p>\n
        <p>import package.classname;</p>\n
        <p>// Class name is generally used when two packages have the same</p>\n
        <p>// class name. For example in below code both packages have</p>\n
        <p>// date class so using a fully qualified name to avoid conflict</p>\n
        <p>import java.util.Date;</p>\n
        <p>import my.package.Date;</p>\n\n
        <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to demonstrate accessing of members when</font></p>\n
                    <p><font color="#2eb82e">\t\t// corresponding classes are imported and not imported.</font></p>\n
                    <p><font color="#3399ff">\t\timport </font>java.util.Vector;</p>\n
                    <p><font color="#3399ff">\t\tpublic class </font>ImportDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic </font>ImportDemo {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// java.util.Vector is imported, hence we are</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// able to access directly in our code.</font></p>\n
                    <p>\t\t\t\t\t\tVector newVector = <font color="#33a3ff">new </font>Vector();</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// java.util.ArrayList is not imported, hence </font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// we were referring to it using the complete </font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// package.</font></p>\n
                    <p>\t\t\t\t\t\tjava.util.ArrayList newList = <font color="#33a3ff">new </font>java.util.ArrayList();</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tnew </font>ImportDemo();</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
            </font>
        <p><b>Types of packages:</b></p>
    </font>
    </string><string name="PackJava4">
        <font size="12">
            <p><b>Built-in Packages</b></p>\n
            <p>These packages consist of a large number of classes which are a part of Java <b>API</b> Some of the commonly used built-in packages are:</p>\n\n
            <p>1. <b>java.lang: </b> Contains language support classes(e.g classed which defines primitive data types, math operations). This package is automatically imported.</p>\n
            <p>2. <b>java.io: </b> Contains classed for supporting input / output operations.</p>\n
            <p>3. <b>java.util: </b> Contains utility classes which implement data structures like Linked List, Dictionary and support ; for Date / Time operations.</p>\n
            <p>4. <b>java.applet: </b> Contains classes for creating Applets.</p>\n
            <p>5. <b>java.awt: </b> Contain classes for implementing the components for graphical user interfaces (like button , ;menus etc).</p>\n
            <p>6. <b>java.net: </b> Contain classes for supporting networking operations.</p>\n\n
            <p><b>User-defined packages</b></p>\n
            <p>These are the packages that are defined by the user. First we create a directory <b>myPackage</b> (name should be same as the name of the package). Then create the <b>MyClass</b> inside the directory with the first statement being the <b>package names</b></p>\n\n
            <p>// Name of the package must be same as the directory</p>\n
            <p>// under which this file is saved</p>\n
            <p>\t\tpackage myPackage;</p>\n
            <p>\t\tpublic class MyClass {</p>\n
            <p>\t\t\t\tpublic void getNames(String s) {</p>\n
            <p>\t\t\t\t\t\tSystem.out.println(s);</p>\n
            <p>\t\t\t\t}</p>\n
            <p>\t\t}</p>\n\n
            <p>Now we can use the <b>MyClass</b> class in our program.</p>\n
            <p>/* import \'MyClass\' class from \'names\' myPackage */</p>\n
            <p>\t\timport myPackage.MyClass;</p>\n
            <p>\t\tpublic class PrintName {</p>\n
            <p>\t\t\t\tpublic static void main(String args[]) {</p>\n
            <p>\t\t\t\t\t\t// Initializing the String variable </p>\n
            <p>\t\t\t\t\t\t// with a value </p>\n
            <p>\t\t\t\t\t\tString name = \"GeeksforGeeks\";</p>\n
            <p>\t\t\t\t\t\t// Creating an instance of class MyClass in </p>\n
            <p>\t\t\t\t\t\t// the package.</p>\n
            <p>\t\t\t\t\t\tMyClass obj = new MyClass();</p>\n
            <p>\t\t\t\t\t\tobj.getNames(name);</p>\n
            <p>\t\t\t\t}</p>\n
            <p>\t\t}</p>\n\n
            <p>Note : MyClass.java must be saved inside the myPackage directory since it is a part of the package.</p>
        </font>
    </string><string name="PackJava5">
        <font size="12">
            <p>Static import is a feature introduced in <b>Java</b> programming language ( versions 5 and above ) that allows members ( fields and methods ) defined in a class as public <b>static</b> to be used in Java code without specifying the class in which the field is defined.</p>\n\n
            <p>Following program demonstrates <b>static import:</b></p>\n\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Note static keyword after import.</font></p>\n
                    <p><font color="#3399ff">\t\timport static </font>java.lang.System.*;</p>\n
                    <p><font color="#3399ff">\t\tclass </font>StaticImportDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// We don\'t need to use \'System.out\' </font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// as imported using static. </font></p>\n
                    <p>\t\t\t\t\t\tout.println(<font color="#4d4dff">\"GeeksforGeeks\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tGeeksforGeeks</p>\n\n\n
            </font>
        </font>
    </string><string name="PackJava6">
        <font size="12">
            <p>The only time we need to pay attention to packages is when we have a name conflict . For example both, java.util and java.sql packages have a class named Date. So if we import both packages in program as follows:</p>\n\n
            <p>import java.util.*;</p>\n
            <p>import java.sql.*;</p>\n\n
            <p>// And then use Date class, then we will get a compile-time error :</p>\n\n
            <p>Date today ; //ERROR-- java.util.Date or java.sql.Date?</p>\n
            <p>The compiler will not be able to figure out which Date class do we want. This problem can be solved by using a specific import statement:</p>\n
            <p>import java.util.Date;</p>\n
            <p>import java.sql.*;</p>\n\n
            <p>If we need both Date classes then, we need to use a full package name every time we declare a new object of that class. \nFor Example:</p>\n
            <p>java.util.Date deadLine = new java.util.Date();</p>\n
            <p>java.sql.Date today = new java.sql.Date();</p>\n
        </font>
    </string><string name="PackJava7">
        <font size="12">
            <p>The package name is closely associated with the directory structure used to store the classes. The classes (and other entities) belonging to a specific package are stored together in the same directory. Furthermore, they are stored in a sub-directory structure specified by its package name. For example, the class Circle of package com.zzz.project1.subproject2 is stored as \“$BASE_DIR\com\zzz\project1\subproject2\Circle.class\”, where $BASE_DIR denotes the base directory of the package. Clearly, the “dot” in the package name corresponds to a sub-directory of the file system.</p>\n\n
            <p>The base directory ($BASE_DIR) could be located anywhere in the file system. Hence, the Java compiler and runtime must be informed about the location of the $BASE_DIR so as to locate the classes. This is accomplished by an environment variable called CLASSPATH. CLASSPATH is similar to another environment variable PATH, which is used by the command shell to search for the executable programs</p>\n\n
            <p><b>Setting CLASSPATH:</b></p>\n
            <p>CLASSPATH can be set by any of the following ways:</p>\n\n
            <ul>
                <li>CLASSPATH can be set permanently in the environment: In Windows, choose control panel ? System ? Advanced ? Environment Variables ? choose \“System Variables\” (for all the users) or \“User Variables\” (only the currently login user) ? choose \“Edit\” (if CLASSPATH already exists) or \“New\” ? Enter \“CLASSPATH\” as the variable name ? Enter the required directories and JAR files (separated by semicolons) as the value (e.g., \“.;c:\javaproject\classes;d:\tomcat\lib\servlet-api.jar\”). Take note that you need to include the current working directory (denoted by \‘.\’) in the CLASSPATH. To check the current setting of the CLASSPATH, issue the following command:</li>\n
                <li>> SET CLASSPATH</li>\n
                <li>CLASSPATH can be set temporarily for that particular CMD shell session by issuing the following command:</li>\n
                <li>> SET CLASSPATH=.;c:\javaproject\classes;d:\tomcat\lib\servlet-api.jar</li>\n
                <li>Instead of using the CLASSPATH environment variable, you can also use the command-line option -classpath or -cp of the javac and java commands, for example,</li>\n
                <li>> java –classpath c:\javaproject\classes com.abc.project1.subproject2.MyClass3</li>\n\n
            </ul>
            <p><b>Illustration of user-defined packages:</b></p>\n
            <p>Creating our first package:</p>\n
            <p>File name – ClassOne.java</p>\n
        </font>
    </string><string name="PackJava8">
        <font size="12">
            <p>Creating our second package:</p>\n
            <p>File name – ClassTwo.java</p>\n
        </font>
    </string><string name="PackJava9">
        <font size="12">
            <p>Making use of both the created packages:</p>\n
            <p>File name – Testing.java</p>\n
        </font>
    </string><string name="PackJava10">
        <font size="12">
            <p>Output:</p>\n
            <p>Hello there i am ClassTwo</p>\n
            <p>Hello there its ClassOne</p>\n\n
            <p>Now having a look at the directory structure of both the packages and the testing class file:</p>\n
        </font>
    </string><string name="PackJava11">
        <font size="12">
            <p><b>Important points:</b></p>\n
            <p>1.	Every class is part of some package.</p>\n
            <p>2.	If no package is specified, the classes in the file goes into a special unnamed package (the same unnamed package for all files).</p>\n
            <p>3.	All classes/interfaces in a file are part of the same package. Multiple files can specify the same package name.</p>\n
            <p>4.	If package name is specified, the file must be in a subdirectory called name (i.e., the directory name must match the package name).</p>\n
            <p>5.	We can access public classes in another (named) package using: <b>package-name.class-name</b></p>\n
        </font>
    </string><string name="FLOWJava">
        <font size="30"><b>FLOW CONTROL IN JAVA</b></font>
    </string><string name="FLOWJava1">
        <font size="12">
            <p>Decision Making in programming is similar to decision-making in real life. In programming also face some situations where we want a certain block of code to be executed when some condition is fulfilled. </p>\n
            <p>A programming language uses control statements to control the flow of execution of a program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program. </p>\n\n
            <p>Java’s Selection statements: </p>\n
            <ul>
                <li><u>if</u></li>\n
                <li><u>if-else</u></li>\n
                <li><u>nested-if</u></li>\n
                <li><u>if-else-if</u></li>\n
                <li><u>switch-case</u></li>\n
                <li><u>jump</u> – break, continue, return</li>\n\n\n
            </ul>
            <p>1. <b>if : </b>if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not. </p>\n
            <p><b>Syntax: </b></p>\n\n
            <p>\t\tif(condition) </p>\n
            <p>\t\t{ </p>\n
            <p>\t\t\t\t// Statements to execute if </p>\n
            <p>\t\t\t\t// condition is true</p>\n
            <p>\t\t} </p>\n\n
            <p>Here, the <b>condition</b> after evaluation will be either true or false. if statement accepts boolean values – if the value is true then it will execute the block of statements under it. </p>\n
            <p>If we do not provide the curly braces \‘{\‘ and \‘}\’ after <b>if( condition )</b> then by default if statement will consider the immediate one statement to be inside its block. For example, </p>\n\n
            <p>\t\tif(condition)</p>\n
            <p>\t\t\t\tstatement1;</p>\n
            <p>\t\t\t\tstatement2;</p>\n\n
            <p>\t\t// Here if the condition is true, if block </p>\n
            <p>\t\t// will consider only statement1 to be inside </p>\n
            <p>\t\t// its block.</p>\n\n
            </font>
    </string><string name="navigator_open">Open nav</string><string name="FLOWJava6">
        <font size="12">
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate using</font></p>\n
                    <p><font color="#2eb82e">\t\t// continue in an if statement</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>ContinueDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tfor </font>(<font color="#33a3ff">int </font>i = <font color="#4d4dff">0</font>; i &lt; <font color="#4d4dff">10</font>; i++) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// If the number is even</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// skip and continue</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\t\t\tif </font>(i % <font color="#33a3ff">2 </font>== <font color="#33a3ff">0</font>)</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\t\t\t\t\tcontinue</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// If number is odd, print it</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(i + <font color="#4d4dff">\"\"</font>);</p>\n
                    <p>\t\t\t\t\t\t}</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\t1 3 5 7 9 </p>\n\n\n
            </font>
            <p><b>Time Complexity: </b>O(1)</p>\n
            <p><b>Auxiliary Space : </b>O(1)</p>\n\n
            <ul>
                <li><b>Return : </b>The return statement is used to explicitly return from a method. That is, it causes program control to transfer back to the caller of the method.</li>\n
            </ul>
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate using return</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>Return {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tboolean </font>t = <font color="#33a3ff">true</font>;</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"Before the return.\"</font>);</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif </font>(t)</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\t\t\treturn</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Compiler will bypass every statement</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// after return</font></p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"This won\'t execute.\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tBefore the return.</p>\n\n\n
            </font>
            <p><b>Time Complexity: </b>O(1)</p>\n
            <p><b>Auxiliary Space : </b>O(1)</p>\n\n
            <p>This article is contributed by <b>Anuj Chauhan</b> and <b>Harsh Aggarwal</b>. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. </p>\n\n
            <p>Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.</p>
        </font>
    </string><string name="FLOWJava5">
        <font size="12">
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate if-else-if ladder</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>ifelseifDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>i = <font color="#2eb82e">20</font>;</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif </font>(i == <font color="#2eb82e">10</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is 10\"</font>);</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\telse if </font>(i == <font color="#2eb82e">15</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is 15\"</font>);</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\telse if </font>(i == <font color="#2eb82e">20</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is 20\"</font>);</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\telse</font></p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is not present\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\ti is 20</p>\n\n\n
            </font>
            <p><b>Time Complexity: </b>O(1)</p>\n
            <p><b>Auxiliary Space : </b>O(1)</p>\n\n
            <p>5. <b>switch-case : </b>The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression. </p>\n
            <p><b>Syntax: </b></p>\n\n
            <p>\t\tswitch (expression) {</p>\n
            <p>\t\t\t\tcase value1:</p>\n
            <p>\t\t\t\t\t\tstatement1;</p>\n
            <p>\t\t\t\t\t\tbreak;</p>\n
            <p>\t\t\t\tcase value2:</p>\n
            <p>\t\t\t\t\t\tstatement2;</p>\n
            <p>\t\t\t\t\t\tbreak;</p>\n
            <p>\t\t\t\t.</p>\n
            <p>\t\t\t\t.</p>\n
            <p>\t\t\t\tcase valueN:</p>\n
            <p>\t\t\t\t\t\tstatementN;</p>\n
            <p>\t\t\t\t\t\tbreak;</p>\n
            <p>\t\t\t\tdefault:</p>\n
            <p>\t\t\t\t\t\tstatementDefault;</p>\n
            <p>\t\t}</p>\n\n
        </font>
        <ul>
            <li>The expression can be of type byte, short, int char, or an enumeration. Beginning with JDK7, expression can also be of type String.</li>\n
            <li>Duplicate case values are not allowed.</li>\n
            <li>The default statement is optional.</li>\n
            <li>The break statement is used inside the switch to terminate a statement sequence.</li>\n
            <li>The break statement is optional. If omitted, execution will continue on into the next case.</li>\n\n\n
        </ul>
        <p>6. <b>jump : </b>Java supports three jump statements: <b>break</b>, <b>continue</b> and <b>return</b>. These three statements transfer control to another part of the program. </p>\n\n
        <ul>
            <li><b>Break : </b>In Java, a break is majorly used for:\nTerminate a sequence in a switch statement (discussed above).\nTo exit a loop.\nUsed as a “civilized” form of goto.</li>\n
            <li><b>Continue : </b>Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. The continue statement performs such an action. </li>\n\n\n
        </ul>
    </string><string name="FLOWJava4">
        <font size="12">
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate nested-if statement</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>NestedIfDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>i = <font color="#2eb82e">10</font>;</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif </font>(i == <font color="#2eb82e">10</font> || i &lt; <font color="#2eb82e">15</font>) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// First if statement</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\t\t\tif </font>(i &lt; <font color="#2eb82e">15</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is smaller than 15\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// Nested - if statement</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// Will only be executed if statement above</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t\t\t// it is true</font></p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\t\t\tif </font>(i &lt; <font color="#2eb82e">12</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is smaller than 12 too\"</font>);</p>\n
                    <p>\t\t\t\t\t\t} <font color="#33a3ff">else </font>{</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is smaller than 12 too\"</font>);</p>\n
                    <p>\t\t\t\t\t\t}</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\ti is smaller than 15\n\t\ti is smaller than 12 too</p>\n\n\n
            </font>
            <p>4. <b>if-else-if ladder : </b>Here, a user can decide among multiple options.The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed. </p>\n
            <p><b>Syntax: </b></p>\n\n
            <p>\t\tif (condition)</p>\n
            <p>\t\t\t\tstatement; </p>\n
            <p>\t\telse if (condition)</p>\n
            <p>\t\t\t\tstatement; </p>\n
            <p>\t\t.)</p>\n
            <p>\t\t.</p>\n
            <p>\t\telse</p>\n
            <p>\t\t\t\tstatement; </p>\n\n
        </font>
    </string><string name="FLOWJava3">
        <font size="12">
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate if-else statement</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>IfElseDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>i = <font color="#2eb82e">10</font>;</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif </font>(i &lt; <font color="#2eb82e">15</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is smaller than 15\"</font>);</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\telse </font></p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"i is greater than 15\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\ti is smaller than 15</p>\n\n\n
            </font>
            <p><b>Time Complexity: </b>O(1)</p>\n
            <p><b>Auxiliary Space : </b>O(1)</p>\n\n
            <p>3. <b>nested-if : </b>A nested if is an if statement that is the target of another if or else. Nested if statements mean an if statement inside an if statement. Yes, java allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement. </p>\n
            <p><b>Syntax: </b></p>\n\n
            <p>\t\tif (condition1)</p>\n
            <p>\t\t{ </p>\n
            <p>\t\t\t\t// Executes when condition1 is true</p>\n
            <p>\t\t\t\tif (condition2)</p>\n
            <p>\t\t\t\t{ </p>\n
            <p>\t\t\t\t// Executes when condition2 is true</p>\n
            <p>\t\t\t\t} </p>\n
            <p>\t\t} </p>\n\n
        </font>>
    </string><string name="FLOWJava2">
        <font size="12">
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java program to illustrate If statement</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>IfDemo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tint </font>i = <font color="#2eb82e">10</font>;</p>\n
                    <p><font color="#33a3ff">\t\t\t\t\t\tif </font>(i > <font color="#2eb82e">15</font>)</p>\n
                    <p>\t\t\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"10 is less than 15\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// This statement will be executed</font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// as if considers one statement by default</font></p>\n
                    <p>\t\t\t\t\t\tout.println(<font color="#4d4dff">\"I am Not in if\"</font>);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tI am Not in if</p>\n\n\n
            </font>
            <p>2. <b>if-else : </b>The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false. </p>\n
            <p><b>Syntax: </b></p>\n\n
            <p>\t\tif(condition) </p>\n
            <p>\t\t{ </p>\n
            <p>\t\t\t\t// Executes this block if</p>\n
            <p>\t\t\t\t// condition is true</p>\n
            <p>\t\t} else {</p>\n
            <p>\t\t\t\t// Executes this block if</p>\n
            <p>\t\t\t\t// condition is false</p>\n
            <p>\t\t} </p>\n\n

        </font>
    </string><string name="LOOPJava">
        <font size="30"><b>LOOPS IN JAVA</b></font>
    </string><string name="LOOPJava4">
        <font size="12">
            <p><b>Syntax:</b></p>\n
            <p>\t\twhile (test_expression)</p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\t// statements</p>\n
            <p>\t\t\t\tupdate_expression;</p>\n
            <p>\t\t}</p>\n\n
            <p>The various <b>parts of the While loop</b> are:</p>\n
            <p>1. <b>Test Expression : </b>In this expression, we have to test the condition. If the condition evaluates to true then we will execute the body of the loop and go to update expression. Otherwise, we will exit from the while loop. </p>\n
            <p><b>Example: </b></p>\n
            <p>\t\ti &lt;= 10</p>\n\n
            <p>2. <b>Update Expression : </b>After executing the loop body, this expression increments/decrements the loop variable by some value. </p>\n
            <p><b>Example: </b></p>\n
            <p>\t\ti++;</p>\n\n
            <p><b>How Does a While loop execute? </b></p>\n
            <p>1. Control falls into the while loop.</p>\n
            <p>2. The flow jumps to Condition</p>\n
            <p>3. Condition is tested. </p>\n
            <ul>
                <li>If Condition yields true, the flow goes into the Body.</li>\n
                <li>If Condition yields false, the flow goes outside the loop</li>\n
            </ul>
            <p>4. The statements inside the body of the loop get executed.</p>\n
            <p>5. Updation takes place.</p>\n
            <p>6. Control flows back to Step 2.</p>\n
            <p>7. The while loop has ended and the flow has gone outside.</p>\n\n
            <p><b>Example 1:</b> This program will try to print \"Hello World\" 5 Times.</p>\n
        </font>
    </string><string name="LOOPJava3">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\t1\n\t\t2\n\t\t3\n\t\t4\n\t\t5\n\t\t6\n\t\t7\n\t\t8\n\t\t9\n\t\t10</p>\n\n\n
            <p><b>Java while loop with Examples</b></p>\n
            <p>Java while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement. While loop in Java comes into use when we need to repeatedly execute a block of statements. The while loop is considered as a repeating if statement. If the number of iterations is not fixed, it is recommended to use the while loop.</p>\n
        </font>
    </string><string name="LOOPJava2">
        <font size="12">
            <p>1. <b>Initialization Expression : </b>In this expression, we have to initialize the loop counter to some value.</p>\n\n
            <p><b>Example: </b></p>\n
            <p>\t\tint i = 1;</p>\n\n
            <p>2. <b>Test Expression : </b>In this expression, we have to test the condition. If the condition evaluates to true then, we will execute the body of the loop and go to update expression. Otherwise, we will exit from the for loop.</p>\n\n
            <p><b>Example: </b></p>\n
            <p>\t\ti &lt;= 10</p>\n\n
            <p>3. <b>Update Expression : </b>After executing the loop body, this expression increments/decrements the loop variable by some value.</p>\n\n
            <p><b>Example: </b></p>\n
            <p>\t\ti++;</p>\n\n\n
            <p><b>How does a For loop execute?  </b></p>\n
            <p>1. Control falls into the for loop. Initialization is done</p>\n
            <p>2. The flow jumps to Condition</p>\n
            <p>3. Condition is tested. </p>\n
            <p>\t\t1. If Condition yields true, the flow goes into the Body</p>\n
            <p>\t\t2. If Condition yields false, the flow goes outside the loop</p>\n
            <p>4. The statements inside the body of the loop get executed.</p>\n
            <p>5. The flow goes to the Updation</p>\n
            <p>6. Updation takes place and the flow goes to Step 3 again</p>\n
            <p>7. The for loop has ended and the flow has gone outside.</p>\n
        </font>
    </string><string name="LOOPJava1">
        <font size="12">
            <p><b>Java For loop with Examples</b></p>\n
            <p>Loops in Java come into use when we need to repeatedly execute a block of statements. Java for loop provides a concise way of writing the loop structure. The for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping.</p>\n
        </font>
    </string><string name="LOOPJava5">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World</p>\n\n\n
            <p><b>Java while loop with Examples</b></p>\n
            <p>Java while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement. While loop in Java comes into use when we need to repeatedly execute a block of statements. The while loop is considered as a repeating if statement. If the number of iterations is not fixed, it is recommended to use the while loop.</p>\n
        </font>
    </string><string name="LOOPJava9">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World</p>\n\n\n
            <p><b>For-each loop in Java</b></p>\n
            <p>For-each is another array traversing technique like for loop, while loop, do-while loop introduced in Java5. </p>\n\n
            <ul>
                <li>It starts with the keyword <b>for</b> like a normal for-loop.</li>\n
                <li>Instead of declaring and initializing a loop counter variable, you declare a variable that is the same type as the base type of the array, followed by a colon, which is then followed by the array name.</li>\n
                <li>In the loop body, you can use the loop variable you created rather than using an indexed array element. </li>\n
                <li>It\’s commonly used to iterate over an array or a Collections class (eg, ArrayList)</li>\n\n\n
            </ul>
            <p><b>Syntax:</b></p>\n
            <p>\t\tfor (type var : array) </p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\tstatements using var;</p>\n
            <p>\t\t}</p>\n\n
            <p><b>is equivalent to: </b></p>\n
            <p>\t\tfor (int i=0; i&lt;arr.length; i++) </p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\ttype var = arr[i];</p>\n
            <p>\t\t\t\tstatements using var;</p>\n
            <p>\t\t}</p>
        </font>
    </string><string name="LOOPJava8">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tPrint statement</p>\n\n\n
            <p><b>Output explanation:</b></p>\n
            <p>In the above code, we figured out that the condition is checked later as the body inside do will get executed one time without fail as the condition is checked later onwards. Hence whenever we want to display the menu and later on proceed command on the terminal, we always use do-while loop.</p>\n\n
            <p><b>Components of do-while Loop</b></p>\n
            <p>A. <b>Test Expression : </b>In this expression, we have to test the condition. If the condition evaluates to true then we will execute the body of the loop and go to update expression. Otherwise, we will exit from the while loop.</p>\n\n
            <p><b>\t\tFor example : </b></p>\n
            <p>\t\t\t\ti &lt;= 10</p>\n
            <p>B. <b>Update Expression : </b>After executing the loop body, this expression increments/decrements the loop variable by some value. </p>\n\n
            <p><b>\t\tFor example : </b></p>\n
            <p>\t\t\t\ti++;</p>\n\n\n
            <p><b>Execution of do-While loop </b></p>\n
            <p>1. Control falls into the do-while loop.</p>\n
            <p>2. The statements inside the body of the loop get executed.</p>\n
            <p>3. Updation takes place.</p>\n
            <p>4. The flow jumps to Condition</p>\n
            <p>5. Condition is tested. </p>\n
            <ul>
                <li>If Condition yields true, go to Step 6.</li>\n
                <li>If Condition yields false, the flow goes outside the loop</li>\n
            </ul>
            <p>6. The flow goes back to Step 2.</p>
        </font>
    </string><string name="LOOPJava7">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World\n\t\tHello World</p>\n\n\n
            <p><b>Java do-while loop with Examples</b></p>\n
            <p><u><b>Loops in Java</b></u>Loops in Java come into use when we need to repeatedly execute a block of statements.<u>Java </u><b>do-while loop</b> is an <b>Exit control loop</b>. Therefore, unlike <b>for</b> or <b>while</b> loop, a do-while check for the condition after executing the statements of the loop body.</p>\n\n
            <p><b>Syntax:</b></p>\n
            <p>\t\tdo</p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\t// Loop Body</p>\n
            <p>\t\t\t\tUpdate_expression</p>\n
            <p>\t\t}</p>\n
            <p>\t\t// Condition check</p>\n
            <p>\t\twhile (test_expression);</p>\n\n
            <p>For example: </p>\n
            <p>You are implementing a game where you show some options to the user, press 1 to do this .., press 2 to do this ...etc and press \‘Q\’ to quit the game. So here you want to show the game menu to the user at least once, so you write the code for the game menu inside the do-while loop.</p>\n
        </font>
    </string><string name="LOOPJava10">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tThe highest score is 132</p>\n\n\n
            <p>1. For-each loops are <b>not appropriate when you want to modify the array</b>:</p>\n
            <p>\t\tfor (int num : marks) </p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\t// only changes num, not the array element</p>\n
            <p>\t\t\t\tnum = num*2; </p>\n
            <p>\t\t}</p>\n\n
            <p>2. For-each loops <b>do not keep track of index</b>. So we can not obtain array index using For-Each loop</p>\n
            <p>\t\tfor (int num : numbers)</p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\tif (num == target) </p>\n
            <p>\t\t\t\t{</p>\n
            <p>\t\t\t\t\t\t// do not know the index of num</p>\n
            <p>\t\t\t\t\t\treturn ???;</p>\n
            <p>\t\t\t\t}</p>\n
            <p>\t\t}</p>\n\n
            <p>3. For-each <b>only iterates forward over the array in single steps</b></p>\n
            <p>\t\t// cannot be converted to a for-each loop</p>\n
            <p>\t\tfor (int i=numbers.length-1; i>0; i--) </p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\tSystem.out.println(numbers[i]);</p>\n
            <p>\t\t}</p>\n\n
            <p>4. For-each <b>cannot process two decision making statements</b> at once</p>\n
            <p>// cannot be easily converted to a for-each loop </p>\n
            <p>\t\tfor (int i=0; i&lt;numbers.length; i++) </p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\tif (numbers[i] == arr[i]) </p>\n
            <p>\t\t\t\t{</p>\n
            <p>\t\t\t\t\t\t...</p>\n
            <p>\t\t\t\t}</p>\n
            <p>\t\t}</p>
        </font>
    </string><string name="LOOPJava6">
        <font size="12">
            <p><b>Syntax:</b></p>\n
            <p>\t\twhile (test_expression)</p>\n
            <p>\t\t{</p>\n
            <p>\t\t\t\t// statements</p>\n
            <p>\t\t\t\tupdate_expression;</p>\n
            <p>\t\t}</p>\n\n\n
            <p>The various <b>parts of the While loop</b>are: </p>\n
            <p>1. <b>Test Expression : </b>In this expression, we have to test the condition. If the condition evaluates to true then we will execute the body of the loop and go to update expression. Otherwise, we will exit from the while loop. </p>\n\n
            <p><b>Example: </b></p>\n
            <p>i &lt;= 10</p>\n
            <p>2. <b>Update Expression : </b>After executing the loop body, this expression increments/decrements the loop variable by some value. </p>\n\n
            <p><b>Example: </b></p>\n
            <p>i++;</p>\n\n
            <p><b>How Does a While loop execute? </b></p>\n
            <p>1. Control falls into the while loop.</p>\n
            <p>2. The flow jumps to Condition</p>\n
            <p>3. Condition is tested. </p>\n
            <ul>
                <li>If Condition yields true, the flow goes into the Body.</li>\n
                <li>If Condition yields false, the flow goes outside the loop</li>\n
            </ul>
            <p>4. The statements inside the body of the loop get executed.</p>\n
            <p>5. Updation takes place.</p>\n
            <p>6. Control flows back to Step 2.</p>\n
            <p>7. The while loop has ended and the flow has gone outside.</p>\n\n
            <p><b>Example 1:</b> This program will try to print \"Hello World\" 5 Times.</p>\n
        </font>
    </string><string name="ARRAYSJava1">
        <font size="12">
            <p>An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values are stored in contiguous memory locations. In the case of class objects, the actual objects are stored in a heap segment. </p>\n
        </font>
    </string><string name="ARRAYSJava">
        <font size="30"><b>ARRAYS IN JAVA</b></font>
    </string><string name="ARRAYSJava2">
        <font size="12">
            <p><b>Creating, initializing and accessing an Array</b></p>\n\n
            <p>One-Dimensional Arrays: </p>\n
            <p>The general form of a one-dimensional array declaration is </p>\n
            <p>\t\ttype var-name[]; OR type[] var-name;</p>\n\n
            <p>An array declaration has two components: the type and the name. type declares the element type of the array. The element type determines the data type of each element that comprises the array. Like an array of integers, we can also create an array of other primitive data types like char, float, double, etc., or user-defined data types (objects of a class). Thus, the element type for the array determines what type of data the array will hold. </p>\n\n
            <p><b>Example: </b></p>
        </font>
    </string><string name="STRINGJava2">
        <font size="12">
            <p><b>Memory allotment of String : </b>Whenever a String Object is created as a literal, the object will be created in the String constant pool. This allows JVM to optimize the initialization of String literal.</p>\n\n
            <p><b>For example: </b></p>\n
            <p>\t\tString str = \"Geeks\";</p>\n\n
            <p>The string can also be declared using <b>new</b> operator i.e. dynamically allocated. In case of String are dynamically allocated they are assigned a new memory location in heap. This string will not be added to String constant pool.</p>\n\n
            <p><b>For example: </b></p>\n
            <p>\t\tString str = new String(\"Geeks\");</p>\n
            <p>\t\tIf you want to store this string in the constant pool then you will need to “intern” it.</p>\n\n
            <p><b>For example: </b></p>\n
            <p>\t\tString internedString = str.intern(); </p>\n
            <p>\t\t// this will add the string to string constant pool.</p>\n\n
            <p>It is preferred to use String literals as it allows JVM to optimize memory allocation. An example that shows how to declare a String</p>\n\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Java code to illustrate String</font></p>\n
                    <p><font color="#3399ff">\t\timport</font> java.io.*;</p>\n
                    <p><font color="#3399ff">\t\timport</font> java.lang.*;</p>\n
                    <p><font color="#3399ff">\t\tclass </font>test {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Declare String without using new operator</font></p>\n
                    <p>\t\t\t\t\t\tString s = <font color="#4d4dff">\"GeeksforGeeks\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Prints the String.</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"String s = \"</font> + s);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Declare String using new operator</font></p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#33a3ff">new </font>String(<font color="#4d4dff">\"GeeksforGeeks\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t// Prints the String.</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(<font color="#4d4dff">\"String s1 = \"</font> + s1);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tString s = GeeksforGeeks\n\t\tString s1 = GeeksforGeeks</p>\n\n\n
            </font>
            <p><b>Interfaces and Classes in Strings in Java</b></p>\n\n
            <p><b>CharBuffer : </b>This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex.</p>\n\n
            <p><b>String : </b>It is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.</p>
        </font>
    </string><string name="STRINGJava1">
        <font size="12">
            <p><b>Strings in Java</b></p>\n
            <p>In the given example only one object will be created. Firstly JVM will not find any string object with the value \“Welcome\” in string constant pool, so it will create a new object. After that it will find the string with the value \“Welcome\” in the pool, it will not create new object but will return the reference to the same instance.</p>\n\n
            <p><b>\t\tNote: </b>String objects are stored in a special memory </p>\n
            <p>\t\tarea known as string constant pool.</p>\n\n
            <p><b>Why java uses the concept of string literal?</b></p>\n
            <p>To make Java more memory efficient (because no new objects are created if it exists already in string constant pool). </p>\n\n
            <p><b>By new keyword</b></p>\n
            <ul>
                <li>String s=new String(\“Welcome\”);</li>\n
                <li>In such a case, JVM will create a new string object in normal (non pool) heap memory and the literal \“Welcome\” will be placed in the string constant pool. The variable s will refer to the object in heap (non pool).</li>\n\n
            </ul>
            <p><b>Example:</b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tpublic class </font>StringExample {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#33a3ff">new </font>String(<font color="#4d4dff">\"example\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//creating java string by new keyword </font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//this statement create two object i.e first object is created in heap </font></p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//memory area and second object is create in String constant pool.</font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s1);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\texample</p>\n\n\n
            </font>
            <p><b>Syntax:</b></p>\n
            <p>\t\t&lt;String_Type> &lt;string_variable> = \"&lt;sequence_of_string>\";</p>\n\n
            <p><b>Example:  </b></p>\n
            <p>\t\tString str = \"Geeks\";</p>\n\n
        </font>
    </string><string name="ARRAYSJava5">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tElement at index 0 : 10</p>\n
            <p>\t\tElement at index 1 : 20</p>\n
            <p>\t\tElement at index 2 : 30</p>\n
            <p>\t\tElement at index 3 : 40</p>\n
            <p>\t\tElement at index 4 : 50</p>\n\n\n
            <p><b>Multidimensional Arrays in Java</b></p>\n
            <p><u>Array-Basics in Java</u><b> Multidimensional Arrays </b>can be defined in simple words as array of arrays. Data in multidimensional arrays are stored in tabular form (in row major order). </p>\n
            <p><b>Syntax:</b></p>\n
            <p><b>\t\tdata_type</b>[1st dimension][2nd dimension][]..[Nth dimension] <b>array_name = new data_type</b> [size1][size2]….[sizeN];</p>\n\n
            <p><b>where:</b></p>\n
            <ul>
                <li><b>data_type : </b>Type of data to be stored in the array. For example: int, char, etc.</li>\n
                <li><b>dimension : </b>The dimension of the array created. For example: 1D, 2D, etc.</li>\n
                <li><b>array_name : </b>Name of the array</li>\n
                <li><b>size1, size2, …, sizeN : </b>Sizes of the dimensions respectively.</li>\n\n
            </ul>
            <p><b>Examples:</b></p>\n
            <p>\n\nTwo dimensional array:</p>\n
            <p>\n\nint[][] twoD_arr = new int[10][20];</p>\n
            <p>\n\nThree dimensional array:</p>\n
            <p>\n\nint[][][] threeD_arr = new int[10][20][30];</p>\n\n
            <p><b>Size of multidimensional arrays : </b>The total number of elements that can be stored in a multidimensional array can be calculated by multiplying the size of all the dimensions. </p>\n\n
            <p><b>For example : </b>The array <b>int[][] x = new int[10][20]</b> can store a total of (10*20) = 200 elements. Similarly, array <b>int[][][] x = new int[5][10][20]</b> can store a total of (5*10*20) = 1000 elements.</p>\n\n
            <p><b>Two – dimensional Array (2D-Array)</b></p>\n
            <p>Two – dimensional array is the simplest form of a multidimensional array. A two – dimensional array can be seen as an array of one – dimensional array for easier understanding. </p>\n\n
            <p><b>Indirect Method of Declaration:</b></p>\n
            <p><b>Declaration – Syntax :</b></p>\n
            <p>\t\tdata_type[][] array_name = new data_type[x][y];</p>\n
            <p>\t\tFor example: int[][] arr = new int[10][20];</p>\n
            <p><b>Initialization – Syntax :</b></p>\n
            <p>\t\tarray_name[row_index][column_index] = value;</p>\n
            <p>\t\tFor example: arr[0][0] = 1;</p>\n\n
            <p><b>Examples:</b></p>\n
        </font>
    </string><string name="ARRAYSJava4">
        <font size="12">
            <p><b>Note : </b></p>\n\n
            <p>1. The elements in the array allocated by new will automatically be initialized to <b>zero</b> (for numeric types), <b>false</b> (for boolean), or <b>null</b>(for reference types). Do refer to <u>default array values in Java</u>.</p>\n\n
            <p>2. Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory to hold the array, using new, and assign it to the array variable. Thus, <b>in Java, all arrays are dynamically allocated.</b></p>\n\n
            <p><b>Array Literal</b></p>\n
            <p>In a situation where the size of the array and variables of the array are already known, array literals can be used. </p>\n\n
            <p>int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; </p>\n
            <p>// Declaring array literal</p>\n
            <ul>
                <li>The length of this array determines the length of the created array.</li>\n
                <li>There is no need to write the new int[] part in the latest versions of Java.</li>\n\n
            </ul>
            <p>Accessing Java Array Elements using for Loop</p>\n
            <p>Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.</p>\n\n
            <p>// accessing the elements of the specified array</p>\n
            <p>for (int i = 0; i &lt; arr.length; i++)</p>\n
            <p>System.out.println(\"Element at index \" + i + \" : \" + arr[i]);</p>\n\n\n
            <p><b>\t\tImplementation:</b></p>
        </font>
    </string><string name="STRINGJava">
        <font size="30"><b>STRINGS IN JAVA</b></font>
    </string><string name="ARRAYSJava3">
        <font size="12">
            <p>Although the first declaration establishes that intArray is an array variable, <b>no actual array exists</b>. It merely tells the compiler that this variable (intArray) will hold an array of the integer type. To link intArray with an actual, physical array of integers, you must allocate one using <b>new</b> and assign it to intArray. </p>\n\n
            <p>When an array is declared, only a reference of an array is created. To create or give memory to the array, you create an array like this: The general form of new as it applies to one-dimensional arrays appears as follows: </p>\n
            <p>\t\tvar-name = new type [size];</p>\n
            <p>Here, type specifies the type of data being allocated, size determines the number of elements in the array, and var-name is the name of the array variable that is linked to the array. To use new to allocate an array, <b>you must specify the type and number of elements to allocate.</b></p>\n\n
            <p>Example: </p>\n
        </font>
    </string><string name="ARRAYSJava6">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tarr[0][0] = 1</p>\n
        </font>
    </string><string name="EXCEPTIONSJava10">
        <font size="12">
            <p><b>Output:</b></p>\n
            <p>/ by zero</p>\n\n
            <p><b>How Programmer Handles an Exception?</b></p>\n
            <p>Customized Exception Handling: Java exception handling is managed via five keywords: try, catch, throw, throws, and finally. Briefly, here is how they work. Program statements that you think can raise exceptions are contained within a try block. If an exception occurs within the try block, it is thrown. Your code can catch this exception (using catch block) and handle it in some rational manner. System-generated exceptions are automatically thrown by the Java run-time system. To manually throw an exception, use the keyword throw. Any exception that is thrown out of a method must be specified as such by a throws clause. Any code that absolutely must be executed after a try block completes is put in a finally block.</p>\n\n
            <p><b>Need for try-catch clause(Customized Exception Handling)</b></p>\n
            <p>Consider the below program in order to get a better understanding of the try-catch clause.</p>\n
        </font>
    </string><string name="STRINGJava5">
        <font size="12">
            <p><i><b>Note: </b>All objects in Java are stored in a heap. The reference variable is to the object stored in the stack area or they can be contained in other objects which puts them in the heap area also.</i></p>\n
            <p><b>Example 1: </b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t//Construct String from subset of char array</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>GFG {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#4d4dff">\t\t\t\t\t\tbyte </font>ascii[]={<font color="#2eb82e">71</font>,<font color="#2eb82e">70</font>,<font color="#2eb82e">71</font>};</p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#33a3ff">new </font>String(ascii);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s1);</p>\n
                    <p>\t\t\t\t\t\tString s2 = <font color="#33a3ff">new </font>String(ascii,<font color="#2eb82e">1</font>,<font color="#2eb82e">2</font>);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s2);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tGFG\n\t\tFG</p>\n\n\n
            </font>
            <p><b>Example 2: </b></p>\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#2eb82e">\t\t// Construct one string from another</font></p>\n
                    <p><font color="#3399ff">\t\tclass </font>GFG {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p><font color="#4d4dff">\t\t\t\t\t\tchar </font>c[]={<font color="#4d4dff">\'G\'</font>,<font color="#4d4dff">\'f\'</font>,<font color="#4d4dff">\'g\'</font>};</p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#33a3ff">new </font>String (c);</p>\n
                    <p>\t\t\t\t\t\tString s2 = <font color="#33a3ff">new </font>String (s1);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s1);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s2);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tGfg\n\t\tGfg</p>\n\n\n
            </font>
            <p><b>Immutable String in Java</b></p>\n
            <ul>
                <li>In java, string objects are immutable. Immutable simply means unmodifiable or unchangeable.</li>\n
                <li>Once string object is created its data or state can\’t be changed but a new string object is created.</li>\n\n
            </ul>
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>Demo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p>\t\t\t\t\t\tString s = <font color="#4d4dff">\"Sachin\"</font>;</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//concat() method appends the string at the end </font></p>\n
                    <p>\t\t\t\t\t\ts.concat(<font color="#4d4dff">\"Tendulkar\"</font>);</p>\n
                    <p><font color="#2eb82e">\t\t\t\t\t\t//will print Sachin because strings are immutable objects </font></p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tSachin</p>\n\n\n
            </font>
            <p>Now it can be understood by the diagram given below. Here Sachin is not changed but a new object is created with \“Sachin Tendulkar\”. That is why string is known as immutable.</p>\n\n
            <p>As you can see in the given figure that two objects are created but s reference variable still refers to \“Sachin\” not to \“Sachin Tendulkar\”. But if we explicitly assign it to the reference variable, it will refer to \“Sachin Tendulkar\” object.</p>\n\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>Demo {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#4d4dff">\"Sachin\"</font>;</p>\n
                    <p>\t\t\t\t\t\ts = s.concat(<font color="#4d4dff">\"Tendulkar\"</font>);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tSachin Tendulkar</p>\n\n\n
            </font>
            <p><b>Why string objects are immutable in java?</b></p>\n
            <p>Because java uses the concept of string literal. Suppose there are 5 reference variables, all referes to one object \“sachin\”. If one reference variable changes the value of the object, it will be affected to all the reference variables. That is why string objects are immutable in java.</p>\n
        </font>
    </string><string name="EXCEPTIONSJava1">
        <font size="12">
            <p><b>Exception Handling</b> in Java is one of the effective means to handle the runtime errors so that the regular flow of the application can be preserved. Java Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.</p>\n\n
            <p><b>Exception</b>is an unwanted or unexpected event, which occurs during the execution of a program, i.e. at run time, that disrupts the normal flow of the program’s instructions. Exceptions can be caught and handled by the program. When an exception occurs within a method, it creates an object. This object is called the exception object. It contains information about the exception, such as the name and description of the exception and the state of the program when the exception occurred.</p>\n\n
            <p><b>Major reasons why an exception Occurs</b></p>\n
            <ul>
                <li>Invalid user input</li>\n
                <li>Device failure</li>\n
                <li>Loss of network connection</li>\n
                <li>Physical limitations (out of disk memory)</li>\n
                <li>Code errors</li>\n
                <li>Opening an unavailable file</li>\n\n
            </ul>
            <p><b>Errors</b>represent irrecoverable conditions such as Java virtual machine (JVM) running out of memory, memory leaks, stack overflow errors, library incompatibility, infinite recursion, etc. Errors are usually beyond the control of the programmer, and we should not try to handle errors.</p>\n\n
            <p>Let us discuss the most important part which is the <b>differences between Error and Exception that is as follows: </b></p>\n
            <ul>
                <li><b>Error : </b>An Error indicates a serious problem that a reasonable application should not try to catch.</li>\n
                <li><b>Exception : </b>Exception indicates conditions that a reasonable application might try to catch.</li>\n\n
            </ul>
            <p><b>Exception Hierarchy</b></p>\n
            <p>All exception and error types are subclasses of class <b>Throwable</b>, which is the base class of the hierarchy. One branch is headed by <b>Exception</b>. This class is used for exceptional conditions that user programs should catch. NullPointerException is an example of such an exception. Another branch, <b>Error</b> is used by the Java run-time system(JVM) to indicate errors having to do with the run-time environment itself(JRE). StackOverflowError is an example of such an error.</p>
        </font>
    </string><string name="EXCEPTIONSJava2">
        <font size="12">
            <p><b>Types of Exceptions </b></p>\n
            <p>Java defines several types of exceptions that relate to its various class libraries. Java also allows users to define their own exceptions.</p>\n
        </font>
    </string><string name="EXCEPTIONSJava3">
        <font size="12">
            <p><b>Exceptions can be categorized in two ways:</b></p>\n\n
            <p>1. <b>Built-in Exceptions</b></p>\n
            <ul>
                <li>Checked Exception</li>\n
                <li>Unchecked Exception</li>\n\n
            </ul>
            <p>2. <b>User-Defined Exceptions</b></p>\n
            <p>Let us discuss the above-defined listed exception that is as follows:</p>\n
            <p>A. <b>Built-in Exceptions : </b></p>\n
            <p>Built-in exceptions are the exceptions that are available in Java libraries. These exceptions are suitable to explain certain error situations.</p>\n
            <ul>
                <li><b>Checked Exceptions : </b>Checked exceptions are called compile-time exceptions because these exceptions are checked at compile-time by the compiler.</li>\n
                <li><b>Unchecked Exceptions : </b>The unchecked exceptions are just opposite to the checked exceptions. The compiler will not check these exceptions at compile time. In simple words, if a program throws an unchecked exception, and even if we didn\’t handle or declare it, the program would not give a compilation error.</li>\n\n
            </ul>
            <p>B. <b>User-Defined Exceptions : </b></p>\n
            <p>Sometimes, the built-in exceptions in Java are not able to describe a certain situation. In such cases, users can also create exceptions, which are called \‘user-defined Exceptions\’. </p>\n\n
            <p>1. Provision to Complete Program Execution</p>\n
            <p>2. Easy Identification of Program Code and Error-Handling Code</p>\n
            <p>3. Propagation of Errors</p>\n
            <p>4. Meaningful Error Reporting</p>\n
            <p>5. Identifying Error Types</p>\n\n
            <p><b>Methods to print the Exception information:</b></p>\n
            <p>1. <b>printStackTrace() : </b>This method prints exception information in the format of Name of the exception: description of the exception, stack</p>\n
        </font>
    </string><string name="STRINGJava4">
        <font size="12">
            <p>A StringTokenizer object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed. A token is returned by taking a substring of the string that was used to create the StringTokenizer object.</p>\n\n
            <p>StringJoiner is a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. Though this can also be with the help of StringBuilder class to append delimiter after each string, StringJoiner provides an easy way to do that without much code to write.</p>\n\n
            <p><b>Syntax:</b></p>\n
            <p>\t\public StringJoiner(CharSequence delimiter)</p>\n\n
            <p><b>Above we saw we can create string by  String Literal. </b></p>\n
            <p>For ex- // String s = \”Welcome\”; </p>\n
            <p>Here the JVM checks the String Constant Pool. If the string does not exist, then a new string instance is created and placed in a pool. If the string exists, then it will not create a new object. Rather, it will return the reference to the same instance. The cache that stores these string instances is known as the String Constant pool or String Pool. In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) space. But in JDK 7 it is moved to the main heap area. </p>\n\n
            <p><b>Why did the String pool move from PermGen to the normal heap area? </b></p>\n
            <p>PermGen space is limited, the default size is just 64 MB. it was a problem with creating and storing too many string objects in PermGen space. That’s why the String pool was moved to a larger heap area. To make Java more memory efficient, the concept of string literal is used. By the use of the ‘new’ keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool. </p>\n\n
            <p>For example:</p>\n
            <p>\t\tString a=new String(\“Bhubaneswar\”)</p>\n\n
            <p>Let us have a look at the concept with a java program and visualize the actual JVM memory structure: </p>\n\n
            <font size="10">
            <p>JAVA</p>\n
                    <p><font color="#3399ff">\t\tclass </font>StringStorage {</p>\n
                    <p><font color="#3399ff">\t\t\t\tpublic static void</font> main(String[] args) {</p>\n
                    <p>\t\t\t\t\t\tString s1 = <font color="#4d4dff">\"TAT\"</font>);</p>\n
                    <p>\t\t\t\t\t\tString s2 = <font color="#4d4dff">\"TAT\"</font>);</p>\n
                    <p>\t\t\t\t\t\tString s3 = <font color="#33a3ff">new </font>String(<font color="#4d4dff">\"TAT\"</font>);</p>\n
                    <p>\t\t\t\t\t\tString s4 = <font color="#33a3ff">new </font>String(<font color="#4d4dff">\"TAT\"</font>);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s1);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s2);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s3);</p>\n
                    <p>\t\t\t\t\t\tSystem.out.println(s4);</p>\n
                    <p>\t\t\t\t}</p>\n
                    <p>\t\t}</p>\n
                    <b><i>Output</i></b>\n
                    <p>\t\tTAT\n\t\tTAT\n\t\tTAT\n\t\tTAT</p>
            </font>
        </font>
    </string><string name="EXCEPTIONSJava12">
        <font size="12">
            <p><b>Output explanation:</b>In the above example, an array is defined with size i.e. you can access elements only from index 0 to 3. But you trying to access the elements at index 4(by mistake) that’s why it is throwing an exception. In this case, JVM terminates the program abnormally. The statement System.out.println(\“Hi, I want to execute\”); will never execute. To execute it, we must handle the exception using try-catch. Hence to continue the normal flow of the program, we need a try-catch clause. </p>\n\n\n
            <p><b>How to Use the try-catch Clause?</b></p>\n
        </font>
    </string><string name="STRINGJava3">
        <font size="12">
            <p>There are two ways to create a string in Java: </p>\n
            <p><b>String literal</b></p>\n
            <p>\t\tString s = \“GeeksforGeeks\”;</p>\n
            <p><b>Using new keyword</b></p>\n
            <p>\t\tString s = new String (\“GeeksforGeeks\”);</p>\n\n
            <p><b>StringBuffer : </b>is a peer class of <b>String</b>String that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences.</p>\n\n
            <p><b>Syntax:</b></p>\n
            <p>\t\tStringBuffer s = new StringBuffer(\"GeeksforGeeks\");</p>\n\n
            <p><b>StringBuilder : </b>in Java represents a mutable sequence of characters. Since the String Class in Java creates an immutable sequence of characters, the StringBuilder class provides an alternate to String Class, as it creates a mutable sequence of characters.</p>\n\n
            <p><b>Syntax:</b></p>\n
            <p>\t\tStringBuilder str = new StringBuilder();</p>\n
            <p>\t\tstr.append(\"GFG\");</p>\n\n
            <p><b>StringTokenizer : </b>class in Java is used to break a string into tokens. </p>\n\n
            <p><b>Example:</b></p>
        </font>
    </string><string name="EXCEPTIONSJava">
        <font size="30"><b>EXCEPTIONS IN JAVA</b></font>
    </string><string name="EXCEPTIONSJava11">
        <font size="12">
            <p><b>Output:</b></p>\n
        </font>
    </string><string name="EXCEPTIONSJava8">
        <font size="12">
            <p><b>Output:</b></p>\n
        </font>
    </string><string name="EXCEPTIONSJava9">
        <font size="12">
            <p>Let us see an example that illustrates how a run-time system searches for appropriate exception handling code on the call stack.</p>\n
        </font>
    </string><string name="EXCEPTIONSJava4">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tjava.lang.ArithmeticException: / by zero at GFG.main(File.java:10)</p>\n\n\n
            <p>2. <b>toString() : </b>This method prints exception information in the format of Name of the exception: description of the exception.</p>\n
        </font>
    </string><string name="EXCEPTIONSJava5">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\tjava.lang.ArithmeticException: / by zero</p>\n\n\n
            <p>3. <b>getMessage() : </b>This method prints only the description of the exception.</p>\n
        </font>
    </string><string name="EXCEPTIONSJava6">
        <font size="12">
            <b><i>Output</i></b>\n
            <p>\t\t/ by zero</p>\n\n\n
            <p><b>How Does JVM handle an Exception?</b></p>\n
            <p><b>Default Exception Handling : </b>Whenever inside a method, if an exception has occurred, the method creates an Object known as an Exception Object and hands it off to the run-time system(JVM). The exception object contains the name and description of the exception and the current state of the program where the exception has occurred. Creating the Exception Object and handling it in the run-time system is called throwing an Exception. There might be a list of the methods that had been called to get to the method where an exception occurred. This ordered list of the methods is called Call Stack. Now the following procedure will happen. </p>\n\n
            <ul>
                <li>The run-time system searches the call stack to find the method that contains a block of code that can handle the occurred exception. The block of the code is called an Exception handler.</li>\n
                <li>The run-time system starts searching from the method in which the exception occurred, and proceeds through the call stack in the reverse order in which methods were called.</li>\n
                <li>If it finds an appropriate handler, then it passes the occurred exception to it. An appropriate handler means the type of the exception object thrown matches the type of the exception object it can handle.</li>\n
                <li>If the run-time system searches all the methods on the call stack and couldn\’t have found the appropriate handler, then the run-time system handover the Exception Object to the default exception handler, which is part of the run-time system. This handler prints the exception information in the following format and terminates the program abnormally.</li>\n\n
            </ul>
            <p>Exception in thread \"xxx\" Name of Exception : Description</p>\n
            <p>... ...... ..  // Call Stack</p>\n\n\n
            <p>Look at the below diagram to understand the flow of the call stack. </p>
        </font>
    </string><string name="EXCEPTIONSJava7">
        <font size="12">
            <p><b>Illustration:</b></p>\n
        </font>
    </string><string name="EXCEPTIONSJava13">
        <font size="12">
            <p><b>Certain below key points are needed to be remembered that are as follows: </b></p>\n
            <ul>
                <li>In a method, there can be more than one statement that might throw an exception, So put all these statements within their own try block and provide a separate exception handler within their own catch block for each of them.</li>\n
                <li>If an exception occurs within the try block, that exception is handled by the exception handler associated with it. To associate the exception handler, we must put a catch block after it. There can be more than one exception handlers. Each catch block is an exception handler that handles the exception to the type indicated by its argument. The argument, ExceptionType declares the type of exception that it can handle and must be the name of the class that inherits from the Throwable class.</li>\n
                <li>For each try block, there can be zero or more catch blocks, but only one final block.</li>\n
                <li>The finally block is optional. It always gets executed whether an exception occurred in try block or not. If an exception occurs, then it will be executed after try and catch blocks. And if an exception does not occur, then it will be executed after the try block. The finally block in java is used to put important codes such as clean up code e.g., closing the file or closing the connection.</li>\n\n
            </ul>
            <p><b>The summary is depicted via visual aid below as follows: </b></p>\n
        </font>
    </string><string name="EXCEPTIONSJava16">
        <font size="12">
            <p><b>Output:</b></p>\n
        </font>
    </string><string name="KEYWORDSJava">
            <font size="30"><b>KEYWORDS IN JAVA</b></font>
    </string><string name="KEYWORDSJava1">
        <font size="12">
            <p><b>abstract : </b>Specifies that a class or method will be implemented later, in a subclass </p>\n
            <p><b>assert : </b>Assert describes a predicate placed in a java program to indicate that the developer thinks that the predicate is always true at that place.</p>\n
            <p><b>boolean : </b>A data type that can hold True and False values only </p>\n
            <p><b>break : </b>A control statement for breaking out of loops.</p>\n
            <p><b>byte : </b>A data type that can hold 8-bit data values </p>\n
            <p><b>case : </b>Used in switch statements to mark blocks of text</p>\n
            <p><b>catch : </b>Catches exceptions generated by try statements</p>\n
            <p><b>char : </b>A data type that can hold unsigned 16-bit Unicode characters</p>\n
            <p><b>class : </b>Declares a new class</p>\n
            <p><b>continue : </b>Sends control back outside a loop</p>\n
            <p><b>default : </b>Specifies the default block of code in a switch statement</p>\n
            <p><b>do : </b>Starts a do-while loop</p>\n
            <p><b>double : </b>A data type that can hold 64-bit floating-point numbers</p>\n
            <p><b>else : </b>Indicates alternative branches in an if statement </p>\n
            <p><b>enum : </b>A Java keyword is used to declare an enumerated type. Enumerations extend the base class.</p>\n
            <p><b>extends : </b>Indicates that a class is derived from another class or interface </p>\n
            <p><b>final : </b>Indicates that a variable holds a constant value or that a method will not be overridden</p>\n
            <p><b>finally : </b>Indicates a block of code in a try-catch structure that will always be executed</p>\n
            <p><b>float : </b>A data type that holds a 32-bit floating-point number </p>\n
            <p><b>for : </b>Used to start a for loop</p>\n
            <p><b>if : </b>Tests a true/false expression and branches accordingly</p>\n
            <p><b>implements : </b>Specifies that a class implements an interface </p>\n
            <p><b>import : </b>References other classes</p>\n
            <p><b>instanceof : </b>Indicates whether an object is an instance of a specific class or implements an interface </p>\n
            <p><b>int : </b>A data type that can hold a 32-bit signed integer </p>\n
            <p><b>interface : </b>Declares an interface</p>\n
            <p><b>long : </b>A data type that holds a 64-bit integer</p>\n
            <p><b>native : </b>Specifies that a method is implemented with native (platform-specific) code </p>\n
            <p><b>new : </b>Creates new objects </p>\n
            <p><b>null : </b>This indicates that a reference does not refer to anything </p>\n
            <p><b>package : </b>Declares a Java package</p>\n
            <p><b>private : </b>An access specifier indicating that a method or variable may be accessed only in the class it\’s declared in</p>\n
            <p><b>protected : </b>An access specifier indicating that a method or variable may only be accessed in the class it\’s declared in (or a subclass of the class it\’s declared in or other classes in the same package)</p>\n
            <p><b>public : </b>An access specifier used for classes, interfaces, methods, and variables indicating that an item is accessible throughout the application (or where the class that defines it is accessible)</p>\n
            <p><b>return : </b>Sends control and possibly a return value back from a called method </p>\n
            <p><b>short : </b>A data type that can hold a 16-bit integer </p>\n
            <p><b>static : </b>Indicates that a variable or method is a class method (rather than being limited to one particular object)</p>\n
            <p><b>strictfp : </b>A Java keyword is used to restrict the precision and rounding of floating-point calculations to ensure portability.</p>\n
            <p><b>super : </b>Refers to a class\’s base class (used in a method or class constructor) </p>\n
            <p><b>switch : </b>A statement that executes code based on a test value </p>\n
            <p><b>synchronized : </b>Specifies critical sections or methods in multithreaded code</p>\n
            <p><b>this : </b>Refers to the current object in a method or constructor </p>\n
            <p><b>throw : </b>Creates an exception</p>\n
            <p><b>throws : </b>Indicates what exceptions may be thrown by a method </p>\n
            <p><b>transient : </b>Specifies that a variable is not part of an object\’s persistent state</p>\n
            <p><b>try : </b>Starts a block of code that will be tested for exceptions </p>\n
            <p><b>void : </b>Specifies that a method does not have a return value</p>\n
            <p><b>volatile : </b>This indicates that a variable may change asynchronously</p>\n
            <p><b>while : </b>Starts a while loop</p>\n
        </font>
    </string></file><file path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\values\themes.xml" qualifiers=""><style name="Theme.JIDetect" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryDark">@color/purple_700</item>
        <item name="colorAccent">@color/teal_200</item>
        
        <item name="android:windowActivityTransitions">true</item>
        <item name="android:windowEnterTransition">@transition/trans_anim</item>
        <item name="android:windowExitTransition">@transition/trans_anim</item>
    </style><style name="Theme.JIDetect.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style><style name="Theme.JIDetect.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar"/><style name="Theme.JIDetect.PopupOverlay" parent="ThemeOverlay.AppCompat.Light"/></file><file path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\values-night\themes.xml" qualifiers="night-v8"><style name="Theme.JIDetect" parent="Theme.AppCompat.Light.DarkActionBar">
        
        <item name="colorPrimary">@color/purple_200</item>
        <item name="colorPrimaryDark">@color/purple_700</item>
        <item name="colorAccent">@color/teal_200</item>
        
    </style></file><file name="backup_rules" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\xml\backup_rules.xml" qualifiers="" type="xml"/><file name="data_extraction_rules" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\xml\data_extraction_rules.xml" qualifiers="" type="xml"/><file name="cornerdis" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\cornerdis.xml" qualifiers="" type="drawable"/><file name="provider_paths" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\xml\provider_paths.xml" qualifiers="" type="xml"/><file name="_17" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_17.png" qualifiers="" type="drawable"/><file name="_18" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_18.png" qualifiers="" type="drawable"/><file name="_19" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_19.png" qualifiers="" type="drawable"/><file name="_20" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_20.png" qualifiers="" type="drawable"/><file name="_21" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_21.png" qualifiers="" type="drawable"/><file name="_22" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_22.png" qualifiers="" type="drawable"/><file name="_23" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_23.png" qualifiers="" type="drawable"/><file name="_24" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_24.png" qualifiers="" type="drawable"/><file name="_25" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_25.png" qualifiers="" type="drawable"/><file name="_26" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_26.png" qualifiers="" type="drawable"/><file name="_27" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_27.png" qualifiers="" type="drawable"/><file name="_28" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_28.png" qualifiers="" type="drawable"/><file name="_29" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_29.png" qualifiers="" type="drawable"/><file name="_30" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_30.png" qualifiers="" type="drawable"/><file name="_31" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_31.png" qualifiers="" type="drawable"/><file name="_32" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_32.png" qualifiers="" type="drawable"/><file name="_33" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_33.png" qualifiers="" type="drawable"/><file name="_34" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_34.png" qualifiers="" type="drawable"/><file name="_35" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_35.png" qualifiers="" type="drawable"/><file name="_36" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_36.png" qualifiers="" type="drawable"/><file name="_37" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_37.png" qualifiers="" type="drawable"/><file name="_38" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_38.png" qualifiers="" type="drawable"/><file name="_39" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_39.png" qualifiers="" type="drawable"/><file name="_40" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_40.png" qualifiers="" type="drawable"/><file name="_41" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_41.png" qualifiers="" type="drawable"/><file name="_42" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_42.png" qualifiers="" type="drawable"/><file name="_43" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_43.png" qualifiers="" type="drawable"/><file name="_44" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_44.png" qualifiers="" type="drawable"/><file name="_45" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_45.png" qualifiers="" type="drawable"/><file name="_46" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_46.png" qualifiers="" type="drawable"/><file name="_47" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_47.png" qualifiers="" type="drawable"/><file name="_48" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_48.png" qualifiers="" type="drawable"/><file name="_49" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_49.png" qualifiers="" type="drawable"/><file name="_50" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_50.png" qualifiers="" type="drawable"/><file name="_51" path="C:\Users\Kuro\Documents\J-IDetect\app\src\main\res\drawable\_51.png" qualifiers="" type="drawable"/></source><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\rs\debug"/><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\resValues\debug"/><source path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\google-services\debug"><file path="C:\Users\Kuro\Documents\J-IDetect\app\build\generated\res\google-services\debug\values\values.xml" qualifiers=""><string name="default_web_client_id" translatable="false">533833471924-gjclqs06v9fj47l6ho58q96fo7mkd8p5.apps.googleusercontent.com</string><string name="firebase_database_url" translatable="false">https://jidetect-5dce1-default-rtdb.firebaseio.com</string><string name="gcm_defaultSenderId" translatable="false">533833471924</string><string name="google_api_key" translatable="false">AIzaSyD_cTO85VWlwEtSZPkc2RNviFObqnha9QU</string><string name="google_app_id" translatable="false">1:533833471924:android:7299dc8a3b472a75cf04e1</string><string name="google_crash_reporting_api_key" translatable="false">AIzaSyD_cTO85VWlwEtSZPkc2RNviFObqnha9QU</string><string name="google_storage_bucket" translatable="false">jidetect-5dce1.appspot.com</string><string name="project_id" translatable="false">jidetect-5dce1</string></file></source></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\Kuro\Documents\J-IDetect\app\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\Kuro\Documents\J-IDetect\app\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"/><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"/><mergedItems/></merger>